#ifndef _LEETCODETEST_H_
#define _LEETCODETEST_H_

#include "LeetCode.h"
#include "Random.h"
#include "Test.h"
#include "Util.h"

using namespace Test;

class LeetCodeTest : public TestClass {
  public:
    LeetCodeTest(Log &log) : TestClass(log) {}
    ~LeetCodeTest(void) {}
    void Init(void);
};

void LeetCodeTest::Init(void) {
    Add("TwoSum-UnsortedMultiSolutions", [&]() {
        auto check = [&](vector<int> &input, int sum) {
            auto pairs = LeetCode::TwoSum::unsortedMultiSolutions(input, sum);
            vector<int> input2(input);
            auto pairs2 =
                LeetCode::TwoSum::unsortedMultiSolutions2(input2, sum);
            sort(pairs.begin(), pairs.end());
            sort(pairs2.begin(), pairs2.end());
            Logger() << "Target " << sum << ", pairs count " << pairs.size()
                     << (pairs.size() == pairs2.size() ? "==" : "!=")
                     << pairs2.size() << endl;
            ASSERT1(pairs.size() == pairs2.size());
            for (size_t i = 0; i < pairs.size(); i++) {
                if (pairs[i] != pairs2[i]) {
                    Logger() << "pairs " << i << "<" << pairs[i].first << ","
                             << pairs[i].second << "> != <" << pairs2[i].first
                             << "," << pairs2[i].second << ">" << endl;
                }
                ASSERT1(pairs[i] == pairs2[i]);
            }
        };

        for (int i = 0; i < 20; i++) {
            vector<int> input = Random::Vector(Random::Int(50, 2), 20, -20);
            int length = (int)input.size();
            Logger() << "Run " << i << ": " << length << " numbers" << endl;
            for (int j = 0; j < length - 1; j++) {
                for (int k = j + 1; k < length; k++) {
                    check(input, input[j] + input[k]);
                }
            }
        }
    });

    Add("TwoSum-SortedMultiSolutions", [&]() {
        auto check = [&](vector<int> &input, int sum) {
            auto pairs = LeetCode::TwoSum::sortedMultiSolutions(input, sum);
            auto pairs2 = LeetCode::TwoSum::sortedMultiSolutions2(input, sum);
            sort(pairs.begin(), pairs.end());
            sort(pairs2.begin(), pairs2.end());
            Logger() << "Target: " << sum << ", pairs count " << pairs.size()
                     << (pairs.size() == pairs2.size() ? "==" : "!=")
                     << pairs2.size() << endl;
            ASSERT1(pairs.size() == pairs2.size());
            for (size_t i = 0; i < pairs.size(); i++) {
                if (pairs[i] != pairs2[i]) {
                    Logger() << "pairs " << i << "<" << pairs[i].first << ","
                             << pairs[i].second << "> != <" << pairs2[i].first
                             << "," << pairs2[i].second << ">" << endl;
                }
                ASSERT1(pairs[i] == pairs2[i]);
            }
        };
        for (int i = 0; i < 20; i++) {
            vector<int> input = Random::Vector(Random::Int(50, 2), 20, -20);
            sort(input.begin(), input.end());
            int length = (int)input.size();
            Logger() << "Run " << i << ": " << length << " numbers" << endl;
            for (int j = 0; j < length - 1; j++) {
                for (int k = j + 1; k < length; k++) {
                    check(input, input[j] + input[k]);
                }
            }
        }
    });

    Add("MedianOfTwoSortedArrays", [&]() {
        auto search = [&](vector<int> &v1, vector<int> &v2) -> double {
            vector<int> v(v1);
            v.insert(v.end(), v2.begin(), v2.end());
            sort(v.begin(), v.end());
            int n = v.size();
            int m = (n - 1) / 2;
            if ((n & 0x1) == 0)
                return (v[m] + v[m + 1]) / 2.0;
            else
                return v[m];
        };

        auto check = [&](vector<int> &v1, vector<int> &v2) {
            Logger() << v1 << v2;
            double e = search(v1, v2);
            double m = LeetCode::findMedianSortedArrays(v1, v2);
            Logger() << "Median " << m << (m == e ? " == " : " != ") << e
                     << endl;
            ASSERT1(m == e);
        };

        for (int i = 0; i < 1000; i++) {
            vector<int> v1 = Random::Vector(Random::Int(50), 50);
            vector<int> v2 = Random::Vector(Random::Int(50), 50);
            if (v1.empty() && v2.empty())
                v1.push_back(Random::Int(50));
            sort(v1.begin(), v1.end());
            sort(v2.begin(), v2.end());
            check(v1, v2);
        }
    });

    Add("LongestPalindromeSubstring", [&]() {
        auto check = [&](const string &s) {
            string p1 = LeetCode::LongestPalindrome::solve1(s);
            string p2 = LeetCode::LongestPalindrome::solve2(s);
            string p3 = LeetCode::LongestPalindrome::solve3(s);
            Logger() << s << ", '" << p1 << "', '" << p2 << "', '" << p3 << "'"
                     << endl;
            ASSERT1(p1 == p2);
            ASSERT1(p1 == p3);
        };

        check("babad");
    });

    Add("StringToInteger", [&]() {
        auto check = [&](const string &s, int e) {
            int r1 = LeetCode::AToI::solve1(s);
            int r2 = LeetCode::AToI::solve2(s);
            Logger() << "atoi(\"" << s << "\") = " << r1
                     << (r1 == e ? " == " : " != ") << e << endl;
            Logger() << "atoi2(\"" << s << "\") = " << r2
                     << (r2 == e ? " == " : " != ") << e << endl;
            ASSERT1(r1 == e);
            ASSERT1(r2 == e);
        };

        check("-2147483647", -2147483647);
    });

    Add("NextPermutation", [&]() {
        auto check = [&](vector<int> &v) {
            sort(v.begin(), v.end());
            Logger() << v;
            vector<int> v2(v);
            vector<int> v3(v);
            while (std::next_permutation(v.begin(), v.end())) {
                LeetCode::Permutation::next(v2);
                LeetCode::Permutation::next2(v3);
                Logger() << v2;
                for (size_t i = 0; i < v.size(); i++) {
                    ASSERT1(v[i] == v2[i]);
                    ASSERT1(v[i] == v3[i]);
                }
            }
            LeetCode::Permutation::next(v2);
            LeetCode::Permutation::next2(v3);
            Logger() << v2;
            for (size_t i = 0; i < v.size(); i++) {
                ASSERT1(v[i] == v2[i]);
                ASSERT1(v[i] == v3[i]);
            }
        };
        for (int i = 0; i < 10; i++) {
            vector<int> input = Random::Vector(Random::Int(6, 1), 6);
            int length = (int)input.size();
            Logger().WriteInformation("Run %d: %d elements\n", i, length);
            check(input);
        }
        for (int i = 0; i < 100; i++) {
            vector<int> v = Random::Vector(Random::Int(10, 1), 10);
            int length = (int)v.size();
            Logger().WriteInformation("Run %d: %d elements\n", i, length);
            Logger() << v;
            vector<int> v2(v);
            vector<int> v3(v);
            std::next_permutation(v.begin(), v.end());
            LeetCode::Permutation::next(v2);
            LeetCode::Permutation::next2(v3);
            Logger() << v2;
            for (size_t i = 0; i < v.size(); i++) {
                ASSERT1(v[i] == v2[i]);
                ASSERT1(v[i] == v3[i]);
            }
        }
    });

    Add("Permutation", [&]() {
        auto check = [&](vector<int> &v) {
            sort(v.begin(), v.end());
            Logger() << v;
            vector<vector<int>> p = {v};
            while (std::next_permutation(v.begin(), v.end()))
                p.push_back(vector<int>(v));
            Logger() << p;
            Util::Sort(p);
            vector<int> v2(v);
            vector<vector<int>> p2 = LeetCode::Permutation::permuteDistinct(v2);
            Logger() << p2;
            Util::Sort(p2);
            vector<int> v3(v);
            vector<vector<int>> p3 =
                LeetCode::Permutation::permuteDistinct2(v3);
            Logger() << p3;
            Util::Sort(p3);
            vector<int> v4(v);
            vector<vector<int>> p4 = LeetCode::Permutation::permuteUnique(v4);
            Logger() << p4;
            Util::Sort(p4);
            ASSERT1(p.size() == p2.size());
            ASSERT1(p.size() == p3.size());
            ASSERT1(p.size() == p4.size());
            for (size_t i = 0; i < p.size(); i++) {
                ASSERT1(0 == Util::Compare(p[i], p2[i]));
                ASSERT1(0 == Util::Compare(p[i], p3[i]));
                ASSERT1(0 == Util::Compare(p[i], p4[i]));
            }
        };
        {
            vector<int> v = {0, 1, 2, 3, 4};
            check(v);
        }
        {
            vector<int> v = {1, 2, 3, 4};
            check(v);
        }
    });

    Add("CombinationSumReuse", [&]() {
        auto check = [&](vector<int> &v, int t) {
            Logger() << v << "Target " << t << endl;
            vector<int> v1(v);
            vector<int> v2(v);
            vector<int> v3(v);
            auto c1 = LeetCode::Combination::combinationSumReuse(v1, t);
            auto c2 = LeetCode::Combination::combinationSumReuse2(v2, t);
            auto c3 = LeetCode::Combination::combinationSumReuse3(v3, t);
            Util::SortGrid(c1);
            Util::SortGrid(c2);
            Util::SortGrid(c3);
            Logger() << c1;
            ASSERT1(c1.size() == c2.size());
            ASSERT1(c1.size() == c3.size());
            for (size_t i = 0; i < c1.size(); i++) {
                ASSERT1(c1[i].size() == c2[i].size());
                ASSERT1(c1[i].size() == c3[i].size());
                for (size_t j = 0; j < c1[i].size(); j++) {
                    ASSERT1(c1[i][j] == c2[i][j]);
                    ASSERT1(c1[i][j] == c3[i][j]);
                }
            }
        };
        for (int i = 0; i < 20; i++) {
            vector<int> input = Util::IncreasingVector(Random::Int(10, 1), 2);
            Util::Shuffle(input);
            int t = 0;
            int c = 1 + (input.size() >> 2);
            for (int j = 0; j < c; j++) {
                t += input[Random::Int(input.size() - 1)];
            }
            check(input, t);
        }
        {
            // vector<int> v = { 6, 11, 5, 3, 2, 8, 7, 4, 10, 9 };
            vector<int> v = {6, 7, 5};
            check(v, 24);
        }
        {
            vector<int> v = {7, 10};
            check(v, 24);
        }
        {
            vector<int> v = {6, 11, 5, 3, 2, 8, 7, 4, 10, 9};
            check(v, 24);
        }
    });

    Add("CombinationSumNoReuse", [&]() {
        auto check = [&](vector<int> &v, int t) {
            Logger() << v << "Target " << t << endl;
            vector<int> v1(v);
            vector<int> v2(v);
            auto c1 = LeetCode::Combination::combinationSumNoReuse(v1, t);
            auto c2 = LeetCode::Combination::combinationSumNoReuse2(v2, t);
            Util::SortGrid(c1);
            Util::SortGrid(c2);
            Logger() << c1 << c2;
            ASSERT1(c1.size() == c2.size());
            for (size_t i = 0; i < c1.size(); i++) {
                ASSERT1(c1[i].size() == c2[i].size());
                for (size_t j = 0; j < c1[i].size(); j++) {
                    ASSERT1(c1[i][j] == c2[i][j]);
                }
            }
        };
        {
            vector<int> v = {10, 1, 2, 7, 6, 1, 5};
            check(v, 8);
        }
    });

    Add("RemoveDuplicates", [&]() {
        auto check = [&](vector<int> &v) {
            Logger() << v;
            set<int> s;
            for (size_t i = 0; i < v.size(); i++) {
                s.insert(v[i]);
            }
            size_t len = LeetCode::removeDuplicates(v);
            Logger() << v;
            ASSERT1(len == s.size());
            for (size_t i = 0; i < len; i++) {
                ASSERT1(v[i] == *s.begin());
                s.erase(s.begin());
            }
        };
        {
            vector<int> v = {0, 1, 2, 3, 4, 5};
            check(v);
        }
        {
            vector<int> v = {0, 0, 0};
            check(v);
        }
        {
            for (int i = 0; i < 20; i++) {
                vector<int> input = Random::Vector(Random::Int(50, 1), 10, -10);
                sort(input.begin(), input.end());
                int length = (int)input.size();
                Logger().WriteInformation("Run %d: %d elements\n", i, length);
                check(input);
            }
        }
    });

    Add("RemoveElement", [&]() {
        auto check = [&](vector<int> &v, int e) {
            Logger() << v << "Removing " << e << endl;
            vector<int> s;
            for (size_t i = 0; i < v.size(); i++) {
                if (v[i] != e)
                    s.push_back(v[i]);
            }
            vector<int> v2(v);

            size_t len = LeetCode::removeElementStable(v, e);
            Logger() << v << "Length " << len << endl;
            size_t len2 = LeetCode::removeElementUnstable(v2, e);
            Logger() << v2 << "Length " << len2 << endl;
            ASSERT1(len == s.size());
            ASSERT1(len2 == s.size());

            sort(v.begin(), v.begin() + len);
            sort(v2.begin(), v2.begin() + len2);
            sort(s.begin(), s.end());
            for (size_t i = 0; i < len; i++) {
                ASSERT1(v[i] == s[i]);
                ASSERT1(v2[i] == s[i]);
            }
        };
        {
            vector<int> v = {0, 1, 2, 3, 4, 5};
            check(v, 0);
        }
        {
            vector<int> v = {0, 0, 0};
            check(v, 0);
        }
        for (int i = 0; i < 20; i++) {
            vector<int> input = Random::Vector(Random::Int(50, 1), 10, -10);
            int length = (int)input.size();
            Logger().WriteInformation("Run %d: %d elements\n", i, length);
            check(input, Random::Int(10, -10));
        }
    });

    Add("SearchRange", [&]() {
        auto check = [&](vector<int> &v, int e) {
            Logger() << v;
            Logger() << "Range " << e << ": ";
            vector<int> p = LeetCode::searchRange(v, e);
            vector<int> p2 = LeetCode::searchRange2(v, e);
            Logger() << "[" << p[0] << ", " << p[1] << "], [" << p2[0] << ", "
                     << p2[1] << "]" << endl;
            ASSERT1(p[0] == p2[0]);
            ASSERT1(p[1] == p2[1]);
            if (p[0] > 0) {
                ASSERT1(v[p[0] - 1] < v[p[0]]);
                ASSERT1(v[p[0]] == e);
            }
            if (0 <= p[1] && p[1] < (int)v.size() - 1) {
                ASSERT1(v[p[1]] < v[p[1] + 1]);
                ASSERT1(v[p[1]] == e);
            }
        };
        {
            vector<int> v = {0};
            check(v, 0);
            check(v, 1);
        }
        {
            vector<int> v = {1, 1};
            check(v, 1);
            check(v, 2);
        }
        {
            vector<int> v = {2, 3};
            check(v, 1);
            check(v, 2);
            check(v, 3);
            check(v, 4);
        }
        for (int i = 0; i < 100; i++) {
            vector<int> input = Random::Vector(Random::Int(100, 1), 5, -5);
            sort(input.begin(), input.end());
            check(input, Random::Int(6, -6));
        }
    });

    Add("MaxSubarray", [&]() {
        auto check = [&](vector<int> &a, int el, int er, int es) -> void {
            Logger() << a;
            int sum = LeetCode::maxSubArray(a);
            int l2, r2;
            int sum2 = LeetCode::maxSubArray2(a, l2, r2);
            Logger().WriteInformation("a[%d..%d] = %d\n", l2, r2, sum2);
            int l3, r3;
            int sum3 = LeetCode::maxSubArray3(a, l3, r3);
            Logger().WriteInformation("a[%d..%d] = %d\n", l3, r3, sum3);
            ASSERT1(es == sum);
            ASSERT1(el == l2);
            ASSERT1(er == r2);
            ASSERT1(es == sum2);
            ASSERT1(el == l3);
            ASSERT1(er == r3);
            ASSERT1(es == sum3);
        };
        {
            vector<int> A = {13, -3, -25, 20, -3,  -16, -23, 18,
                             20, -7, 12,  -5, -22, 15,  -4,  7};
            check(A, 7, 10, 43);
        }
        {
            vector<int> A = {13};
            check(A, 0, 0, 13);
        }
        {
            vector<int> A = {13, -3};
            check(A, 0, 0, 13);
        }
        {
            vector<int> A = {13, -3, -25};
            check(A, 0, 0, 13);
        }
        {
            vector<int> A = {13, -3, -25, 20};
            check(A, 3, 3, 20);
        }
        {
            vector<int> A = {13, -3, -25, 20, -3};
            check(A, 3, 3, 20);
        }
        {
            vector<int> A = {13, -3, -25, 20, -3, -16, -23, 18};
            check(A, 3, 3, 20);
        }
        {
            vector<int> A = {13, 3, 25, 20, 3,  16, 23, 18,
                             20, 7, 12, 5,  22, 15, 4,  7};
            check(A, 0, (int)A.size() - 1, 213);
        }
        {
            vector<int> A = {13, 3};
            check(A, 0, 1, 16);
        }
        {
            vector<int> A = {13, 3, 25};
            check(A, 0, 2, 41);
        }
        {
            vector<int> A = {-13, -3, -25, -20, -3,  -16, -23, -18,
                             -20, -7, -12, -5,  -22, -15, -4,  -7};
            check(A, 1, 1, -3);
        }
        {
            vector<int> A = {-13};
            check(A, 0, 0, -13);
        }
        {
            vector<int> A = {-13, -3};
            check(A, 1, 1, -3);
        }
        {
            vector<int> A = {0,   0,  -25, -20, -3,  -16, -23, -18,
                             -20, -7, -12, -5,  -22, -15, -4,  -7};
            check(A, 0, 0, 0);
        }
        {
            vector<int> A = {0};
            check(A, 0, 0, 0);
        }
        {
            vector<int> A = {0,  0, 25, 20, 3,  16, 23, 18,
                             20, 7, 12, 5,  22, 15, 0,  0};
            check(A, 2, 13, 186);
        }
        {
            vector<int> A = {-25, -20, -3,  0,  0,   -16, -23, -18,
                             -20, -7,  -12, -5, -22, -15, -4,  -7};
            check(A, 3, 3, 0);
        }
        {
            vector<int> A = {-25, -20, -3, 0, 0};
            check(A, 3, 3, 0);
        }
        {
            vector<int> A = {1,   1,  1,   -1, -1,  -1,  -1, -18,
                             -20, -7, -12, -5, -22, -15, -4, -7};
            check(A, 0, 2, 3);
        }
        {
            vector<int> A = {1, 1, 1, -1, -1, -1};
            check(A, 0, 2, 3);
        }
        {
            vector<int> A = {1,   1,  1,   -1, -1,  -1,  -1, -18,
                             -20, -7, -12, -5, -22, -15, -4, 7};
            check(A, (int)A.size() - 1, (int)A.size() - 1, 7);
        }
        {
            vector<int> A = {
                -226810937, 607950954,   640895092,  884005970,  -649503488,
                -353856437, 576018669,   -477225174, 115899598,  -48539461,
                276748204,  -290373133,  28778236,   971155940,  893772103,
                291438717,  466641603,   -769652651, 229713913,  -1038736612,
                -552146455, -779039256,  653214606,  -737276041, -212720293,
                -795018961, -840076700,  1071432244, -605038688, 27772106,
                728237979,  241892199,   -438018765, 295391246,  52156344,
                -13780430,  1015276633,  -445566812, 582736219,  57434406,
                579635550,  -214257402,  840803096,  -465328039, -316843286,
                660833375,  899852501,   -923943508, 964922547,  55824590,
                -888938297, -660965732,  350527157,  838018133,  -324499950,
                -935934961, -1030742653, -90834827,  -938244542, -562039518,
                1010679102, 863735261,   753594504,  -501081487, 85384682,
                -267990977, 558879906,   26919490,   360184034,  67874301,
                -989387928, -133922241,  927358722,  925156991,  474491544,
                -463226389, 512248541,   300602220,  -313428073, 403429264,
                -717315015, -128624547,  816205355,  706953965};
            check(A, 27, 83, 1391522844);
        }
        {
            int d = RAND_MAX >> 1;
            for (int i = 0; i < 1000; i++) {
                vector<int> input;
                int length = 1 + (rand() % 100);
                for (int j = 0; j < length; j++) {
                    input.push_back(rand() - d);
                }
                Logger() << input;
                int sum = LeetCode::maxSubArray(input);
                Logger().WriteInformation("MaxSubArraySum = %d\n", sum);
                int l2, r2;
                int sum2 = LeetCode::maxSubArray2(input, l2, r2);
                Logger().WriteInformation("a[%d..%d] = %d\n", l2, r2, sum2);
                int l3, r3;
                int sum3 = LeetCode::maxSubArray3(input, l3, r3);
                Logger().WriteInformation("a[%d..%d] = %d\n", l3, r3, sum3);
                ASSERT1(l2 == l3);
                ASSERT1(r2 == r3);
                ASSERT1(sum == sum2);
                ASSERT1(sum == sum3);
            }
        }
        {
            for (int i = 0; i < 1000; i++) {
                vector<int> input;
                int length = 1 + (rand() % 100);
                for (int j = 0; j < length; j++) {
                    input.push_back(rand() % 20 - 10);
                }
                Logger() << input;
                int sum = LeetCode::maxSubArray(input);
                int l2, r2;
                int sum2 = LeetCode::maxSubArray2(input, l2, r2);
                Logger().WriteInformation("a[%d..%d] = %d\n", l2, r2, sum2);
                int l3, r3;
                int sum3 = LeetCode::maxSubArray3(input, l3, r3);
                Logger().WriteInformation("a[%d..%d] = %d\n", l3, r3, sum3);
                ASSERT1(l2 == l3);
                ASSERT1(r2 == r3);
                ASSERT1(sum == sum2);
                ASSERT1(sum == sum3);
            }
        }
    });

    Add("JumpGame", [&]() {
        auto check = [&](vector<int> a) {
            Logger() << a;
            bool c = LeetCode::canJump(a);
            bool c2 = LeetCode::canJump2(a);
            Logger().WriteInformation("Can %sjump\n", c ? "" : "not ");
            Logger().WriteInformation("Can %sjump\n", c2 ? "" : "not ");
            ASSERT1(c == c2);
        };
        {
            vector<int> a = {0, 1};
            check(a);
        }
        {
            vector<int> a = {2, 3, 1, 1, 4};
            check(a);
        }
        {
            vector<int> a = {3, 2, 1, 0, 4};
            check(a);
        }
        {
            for (int i = 0; i < 100; i++) {
                vector<int> a = Random::Vector(Random::Int(100, 1), 10);
                check(a);
            }
        }
    });

    Add("LengthOfLastWord", [&]() {
        auto check = [&](const string &s, int el = -1) {
            Logger() << "\"" << s << "\"" << endl;
            int l1 = LeetCode::lengthOfLastWord(s);
            int l2 = LeetCode::lengthOfLastWord2(s);
            Logger() << "LengthOfLastWord: " << l1
                     << (l1 == l2 ? " == " : " != ") << l2 << endl;
            if (el == -1)
                ASSERT1(l1 == l2);
            else {
                ASSERT1(l1 == el);
                ASSERT1(l2 == el);
            }
        };
        {
            check("", 0);
            check("a", 1);
            check(" ", 0);
            check("  ", 0);
            check("ababa", 5);
            check("a a", 1);
            check("a  a", 1);
            check("a    a", 1);
            check("a a sv", 2);
            check("aa asfd", 4);
            check("   aa", 2);
            check("  a", 1);
            check(" aas", 3);
        }
        {
            for (int i = 0; i < 100; i++) {
                string s = Random::String(Random::Int(100, 0));
                check(s);
            }
        }
    });

    Add("SpiralMatrix", [&]() {
        auto check = [&](vector<vector<int>> m) {
            Logger() << m;
            vector<int> o = LeetCode::spiralOrder(m);
            vector<int> o2 = LeetCode::spiralOrder2(m);
            Logger() << o << o2;
            ASSERT1(o.size() == o2.size());
            for (int i = 0; i < (int)o.size(); i++) {
                ASSERT1(o[i] == i);
                ASSERT1(o2[i] == i);
            }
        };
        {
            vector<vector<int>> m = {{0}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0, 1}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0, 1, 2}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0}, {1}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0}, {1}, {2}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0, 1}, {3, 2}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0, 1, 2}, {5, 4, 3}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0, 1}, {5, 2}, {4, 3}};
            check(m);
        }
        {
            vector<vector<int>> m = {{0, 1, 2}, {7, 8, 3}, {6, 5, 4}};
            check(m);
        }
        {
            vector<vector<int>> m = {
                {0, 1, 2, 3}, {9, 10, 11, 4}, {8, 7, 6, 5}};
            check(m);
        }
        {
            vector<vector<int>> m = {
                {0, 1, 2}, {9, 10, 3}, {8, 11, 4}, {7, 6, 5}};
            check(m);
        }
        {
            vector<vector<int>> m = {
                {0, 1, 2, 3}, {11, 12, 13, 4}, {10, 15, 14, 5}, {9, 8, 7, 6}};
            check(m);
        }
        {
            for (int i = 0; i < 100; i++) {
                vector<vector<int>> m =
                    Random::Grid(Random::Int(50, 1), Random::Int(50, 1));
                Logger() << m;
                vector<int> o = LeetCode::spiralOrder(m);
                vector<int> o2 = LeetCode::spiralOrder2(m);
                ASSERT1(o.size() == o2.size());
                for (size_t j = 0; j < o.size(); j++) {
                    ASSERT1(o[j] == o2[j]);
                };
            }
        }
    });

    Add("UniquePathsII", [&]() {
        auto test = [&](vector<vector<int>> &grid, int expected) {
            int count = LeetCode::uniquePathsWithObstacles(grid);
            Logger() << "Unique paths: " << count << "\n";
            ASSERT1(count == expected);
        };

        vector<vector<int>> grid = {{0, 0}, {0, 0}};
        test(grid, 2);
    });

    Add("LargestRectangleInHistogram", [&]() {
        auto check = [&](const vector<int> &h, int e) {
            Logger().WriteInformation("Histogram:");
            for (size_t i = 0; i < h.size(); i++) {
                Logger().WriteInformation(" %d", h[i]);
            }
            Logger().WriteInformation("\n");
            int a = Test::LeetCode::LargestRectangleInHistogram(h);
            int b = Test::LeetCode::LargestRectangleInHistogram2(h);
            int c = Test::LeetCode::LargestRectangleInHistogram3(h);
            Logger().WriteInformation(" max area: %d, %d, %d\n", a, b, c);
            if (e >= 0) {
                ASSERT1(a == e);
                ASSERT1(b == e);
                ASSERT1(c == e);
            } else {
                ASSERT1(a == b);
                ASSERT1(a == c);
            }
        };

        check(vector<int>{1}, 1);
        check(vector<int>{2}, 2);
        check(vector<int>{1, 1}, 2);
        check(vector<int>{1, 2}, 2);
        check(vector<int>{1, 3}, 3);
        check(vector<int>{2, 3}, 4);
        check(vector<int>{0, 1}, 1);
        check(vector<int>{0, 2}, 2);
        check(vector<int>{0, 0}, 0);
        check(vector<int>{1, 0}, 1);
        check(vector<int>{2, 0}, 2);
        check(vector<int>{2, 1}, 2);
        check(vector<int>{3, 1}, 3);
        check(vector<int>{3, 2}, 4);
        check(vector<int>{0, 0, 0}, 0);
        check(vector<int>{1, 0, 0}, 1);
        check(vector<int>{0, 1, 0}, 1);
        check(vector<int>{0, 0, 1}, 1);
        check(vector<int>{1, 1, 0}, 2);
        check(vector<int>{1, 0, 1}, 1);
        check(vector<int>{0, 1, 1}, 2);
        check(vector<int>{1, 1, 1}, 3);
        check(vector<int>{2, 1, 1}, 3);
        check(vector<int>{1, 2, 1}, 3);
        check(vector<int>{1, 1, 2}, 3);
        check(vector<int>{3, 1, 1}, 3);
        check(vector<int>{1, 3, 1}, 3);
        check(vector<int>{1, 1, 3}, 3);
        check(vector<int>{4, 1, 1}, 4);
        check(vector<int>{1, 4, 1}, 4);
        check(vector<int>{1, 1, 4}, 4);
        check(vector<int>{1, 2, 2}, 4);
        check(vector<int>{2, 1, 2}, 3);
        check(vector<int>{2, 2, 1}, 4);
        check(vector<int>{1, 2, 3}, 4);
        check(vector<int>{1, 3, 2}, 4);
        check(vector<int>{2, 1, 3}, 3);
        check(vector<int>{2, 3, 1}, 4);
        check(vector<int>{3, 1, 2}, 3);
        check(vector<int>{3, 2, 1}, 4);
        check(vector<int>{1, 2, 5}, 5);
        check(vector<int>{1, 5, 2}, 5);
        check(vector<int>{5, 2, 1}, 5);
        check(vector<int>{5, 1, 2}, 5);
        check(vector<int>{1, 3, 4}, 6);
        check(vector<int>{3, 1, 4}, 4);
        check(vector<int>{1, 2, 3, 4}, 6);
        check(vector<int>{2, 1, 3, 4}, 6);
        check(vector<int>{2, 3, 1, 4}, 4);
        check(vector<int>{4, 2, 1, 3}, 4);
        check(vector<int>{4, 2, 3, 1}, 6);
        check(vector<int>{1, 2, 3, 4, 5}, 9);
        check(vector<int>{5, 4, 3, 2, 1}, 9);
        check(vector<int>{2, 1, 5, 6, 2, 3}, 10);
        for (int i = 0; i < 100; i++) {
            int len = 1 + (rand() % 100);
            vector<int> hist;
            for (int j = 0; j < len; j++) {
                int v = (rand() % 100);
                hist.push_back(v);
            }
            check(hist, -1);
        }
    });

    Add("MinWindow", [&]() {
        auto check = [&](const string &s, const string &t, const string &e) {
            Logger().WriteInformation("Source: %s\n", s.c_str());
            Logger().WriteInformation("Target: %s\n", t.c_str());
            string u = Test::LeetCode::MinWindow(s, t);
            string v = Test::LeetCode::MinWindow2(s, t);
            Logger().WriteInformation("Substring: %s %s %s\n", u.c_str(),
                                      u == v ? "==" : "!=", v.c_str());
            ASSERT1(u == e);
            ASSERT1(v == e);
        };
        check("", "", "");
        check("", "A", "");
        check("A", "", "");
        check("AA", "A", "A");
        check("AA", "AA", "AA");
        check("AB", "A", "A");
        check("AB", "B", "B");
        check("AB", "BA", "AB");
        check("AB", "AB", "AB");
        check("ACCCCCBCCCACCACB", "ABA", "ACCACB");
        check("ACCCCCBCCCACCACB", "ABD", "");
        check("ADOBECODEBANC", "ABC", "BANC");
    });

    Add("TrapWater", [&]() {
        auto check = [&](int a[], int n) {
            for (int i = 0; i < n; i++) {
                Logger().WriteInformation("%s %d", i == 0 ? "" : ",", a[i]);
            }
            Logger().WriteInformation("\n");
            int s = Test::LeetCode::TrapWater(a, n);
            int s2 = s; // Test::LeetCode::TrapWater2(a, n);
            Logger().WriteInformation("  Trapped water: %d, %d\n", s, s2);
            ASSERT1(s == s2);
        };
        {
            int a[] = {1};
            check(a, 1);
        }
        {
            int a[] = {1, 2};
            check(a, 2);
        }
        {
            int a[] = {2, 1};
            check(a, 2);
        }
        {
            int a[] = {1, 2, 3};
            check(a, 3);
        }
        {
            int a[] = {3, 2, 1};
            check(a, 3);
        }
        {
            int a[] = {2, 1, 3};
            check(a, 3);
        }
        {
            int a[] = {3, 1, 2};
            check(a, 3);
        }
        {
            int a[] = {2, 0, 2, 1, 3};
            check(a, 5);
        }
        {
            int a[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
            check(a, 12);
        }
        {
            int a[] = {5, 2, 1, 2, 1, 5};
            check(a, 6);
        }
    });

    Add("FirstMissingPositive", [&]() {
        auto check = [&](int a[], int n) {
            unique_ptr<int[]> b(new int[n]);
            for (int i = 0; i < n; i++) {
                Logger().WriteInformation("%s %d", i == 0 ? "" : ",", a[i]);
                b[i] = a[i];
            }
            Logger().WriteInformation("\n");
            int s = Test::LeetCode::FirstMissingPositive(a, n);
            int s2 = Test::LeetCode::FirstMissingPositive2(b.get(), n);
            Logger().WriteInformation("  first missing positive: %d, %d\n", s,
                                      s2);
            ASSERT1(s == s2);
        };
        {
            int a[] = {1, 2, 0};
            check(a, 3);
        }
        {
            int a[] = {3, 4, -1, 1};
            check(a, 4);
        }
        {
            int a[] = {3, 4, 2};
            check(a, 3);
        }
        {
            int a[] = {4, 3, 2, 1};
            check(a, 4);
        }
        {
            int a[] = {1, 1};
            check(a, 2);
        }
    });

    Add("LongestValidParentheses", [&]() {
        auto check = [&](const string &s) {
            int l = Test::LeetCode::LongestValidParentheses(s);
            int l2 = Test::LeetCode::LongestValidParentheses2(s);
            int l3 = Test::LeetCode::LongestValidParentheses3(s);
            int l4 = Test::LeetCode::LongestValidParentheses4(s);
            Logger().WriteInformation("%s: %d, %d, %d, %d\n", s.c_str(), l, l2,
                                      l3, l4);
            ASSERT1(l == l2);
            ASSERT1(l == l4);
        };
        check("()");
        check("()()");
        check("(())");
        check("(()())");
        check("(()())((()())(()()))");
        for (int i = 0; i < 10; i++) {
            size_t n = Random::Int(20, 2);
            string s = Random::String(n, string("()"));
            check(s);
        }
    });
}
#endif