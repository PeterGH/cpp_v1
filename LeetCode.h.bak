#ifndef _LEETCODE_H_
#define _LEETCODE_H_

#include <algorithm>
#include <functional>
#include <limits.h>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <unordered_map>
#include <vector>

using namespace std;

namespace Test {
namespace LeetCode {

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// 105. Construct Binary Tree from Preorder and Inorder Traversal
// Given preorder and inorder traversal of a tree, construct the binary tree.
// Note: You may assume that duplicates do not exist in the tree.
static TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
    function<TreeNode *(int, int, int, int)> build = [&](int i1, int i2, int j1,
                                                         int j2) -> TreeNode * {
        if (i1 > i2)
            return nullptr;
        TreeNode *node = new TreeNode(preorder[i1]);
        int k;
        for (k = j1; k <= j2; k++) {
            if (preorder[i1] == inorder[k])
                break;
        }
        if (k <= j2) {
            node->left = build(i1 + 1, i1 + k - j1, j1, k - 1);
            node->right = build(i1 + k - j1 + 1, i2, k + 1, j2);
        }
        return node;
    };
    return build(0, preorder.size() - 1, 0, inorder.size() - 1);
}

// 106. Construct Binary Tree from Inorder and Postorder Traversal
// Given inorder and postorder traversal of a tree, construct the binary tree.
// Note: You may assume that duplicates do not exist in the tree.
static TreeNode *buildTreeInOrderPostOrder(vector<int> &inorder,
                                           vector<int> &postorder) {
    function<TreeNode *(int, int, int, int)> build = [&](int i1, int i2, int j1,
                                                         int j2) -> TreeNode * {
        if (j1 > j2)
            return nullptr;
        TreeNode *node = new TreeNode(postorder[j2]);
        int k;
        for (k = i1; k <= i2; k++) {
            if (inorder[k] == postorder[j2])
                break;
        }
        if (k <= i2) {
            node->left = build(i1, k - 1, j1, j2 - i2 + k - 1);
            node->right = build(k + 1, i2, j2 - i2 + k, j2 - 1);
        }
        return node;
    };
    return build(0, inorder.size() - 1, 0, postorder.size() - 1);
}

// 108. Convert Sorted Array to Binary Search Tree
// Given an array where elements are sorted in ascending order, convert it to a
// height balanced BST.
static TreeNode *sortedArrayToBST(vector<int> &nums) {
    function<TreeNode *(int, int)> build = [&](int i, int j) -> TreeNode * {
        if (i > j)
            return nullptr;
        int k = i + ((j - i) >> 1);
        TreeNode *node = new TreeNode(nums[k]);
        node->left = build(i, k - 1);
        node->right = build(k + 1, j);
        return node;
    };
    return build(0, nums.size() - 1);
}

// 109. Convert Sorted List to Binary Search Tree
// Given a singly linked list where elements are sorted in ascending order,
// convert it to a height balanced BST.
static TreeNode *sortedListToBST(ListNode *head) {
    if (head == nullptr)
        return nullptr;
    if (head->next == nullptr)
        return new TreeNode(head->val);
    function<TreeNode *(ListNode *, ListNode *)> build =
        [&](ListNode *b, ListNode *e) -> TreeNode * {
        if (b == nullptr || e == nullptr)
            return nullptr;
        TreeNode *node;
        if (b == e) {
            node = new TreeNode(b->val);
        } else if (b->next == e) {
            node = new TreeNode(b->val);
            node->right = new TreeNode(e->val);
        } else {
            ListNode *p = b;
            ListNode *q = p->next->next;
            while (q != e && q->next != e) {
                p = p->next;
                q = q->next;
                q = q->next;
            }
            node = new TreeNode(p->next->val);
            node->left = build(b, p);
            node->right = build(p->next->next, e);
        }
        return node;
    };
    ListNode *p = head;
    ListNode *q = p->next;
    while (q->next != nullptr && q->next->next != nullptr) {
        p = p->next;
        q = q->next;
        q = q->next;
    }
    TreeNode *node = new TreeNode(p->next->val);
    node->left = build(head, p);
    node->right = build(p->next->next, q->next == nullptr ? q : q->next);
    return node;
}

// 114. Flatten Binary Tree to Linked List
// Given a binary tree, flatten it to a linked list in-place. For example, Given
//     1
//    / \
//   2   5
//  / \   \
// 3   4   6
// The flattened tree should look like:
// 1
//  \
//   2
//    \
//     3
//      \
//       4
//        \
//         5
//          \
//           6
static void flatten(TreeNode *root) {
    function<TreeNode *(TreeNode *)> solve = [&](TreeNode *node) -> TreeNode * {
        if (node == nullptr)
            return nullptr;
        if (node->left == nullptr && node->right == nullptr) {
            return node;
        }
        TreeNode *leftTail = solve(node->left);
        TreeNode *rightTail = solve(node->right);
        if (leftTail != nullptr) {
            leftTail->right = node->right;
            node->right = node->left;
            node->left = nullptr;
        }
        return rightTail == nullptr ? leftTail : rightTail;
    };
    solve(root);
}

// 173. Binary Search Tree Iterator
// Implement an iterator over a binary search tree (BST). Your iterator will be
// initialized with the root node of a BST. Calling next() will return the next
// smallest number in the BST. Note: next() and hasNext() should run in average
// O(1) time and uses O(h) memory, where h is the height of the tree.
class BSTIterator {
  private:
    stack<TreeNode *> _stack;
    TreeNode *_node;

  public:
    BSTIterator(TreeNode *root) { _node = root; }

    /** @return whether we have a next smallest number */
    bool hasNext() { return !_stack.empty() || _node != nullptr; }

    /** @return the next smallest number */
    int next() {
        int val;
        while (hasNext()) {
            if (_node != nullptr) {
                _stack.push(_node);
                _node = _node->left;
            } else {
                _node = _stack.top();
                _stack.pop();
                val = _node->val;
                _node = _node->right;
                break;
            }
        }
        return val;
    }
};

struct TreeLinkNode {
    TreeLinkNode *left;
    TreeLinkNode *right;
    TreeLinkNode *next;
};

// 116. Populating Next Right Pointers in Each Node
// Given a binary tree Populate each next pointer to point to its next right
// node. If there is no next right node, the next pointer should be set to NULL.
// Initially, all next pointers are set to NULL. Note: You may only use constant
// extra space. You may assume that it is a perfect binary tree (ie, all leaves
// are at the same level, and every parent has two children). For example, Given
// the following perfect binary tree,
//      1
//    /   \
//   2     3
//  / \   / \
// 4   5 6   7
// After calling your function, the tree should look like :
//      1->NULL
//    /   \
//   2 ->  3->NULL
//  / \   / \
// 4-> 5->6->7->NULL
static void connect(TreeLinkNode *root) {
    TreeLinkNode *leftMost = root;
    while (leftMost != nullptr && leftMost->left != nullptr) {
        TreeLinkNode *node = leftMost;
        leftMost = leftMost->left;
        TreeLinkNode *left = nullptr;
        while (node != nullptr) {
            if (left != nullptr) {
                left->next = node->left;
            }
            node->left->next = node->right;
            left = node->right;
            node = node->next;
        }
    }
}

// 117. Populating Next Right Pointers in Each Node II
// Follow up for problem "Populating Next Right Pointers in Each Node". What if
// the given tree could be any binarytree ? Would your previous solution still
// work? Note: You may only use constant extra space. For example, Given the
// following binary tree,
//     1
//    / \
//   2    3
//  / \    \
// 4   5    7
// After calling your function, the tree should look like :
//     1->NULL
//    / \
//   2 -> 3->NULL
//  / \    \
// 4-> 5 -> 7->NULL
static void connect2(TreeLinkNode *root) {
    TreeLinkNode *leftMost = root;
    while (leftMost != nullptr) {
        TreeLinkNode *node = leftMost;
        leftMost = nullptr;
        TreeLinkNode *left = nullptr;
        while (node != nullptr) {
            if (node->left != nullptr) {
                if (leftMost == nullptr) {
                    leftMost = node->left;
                }
                if (left != nullptr) {
                    left->next = node->left;
                }
                left = node->left;
            }
            if (node->right != nullptr) {
                if (leftMost == nullptr) {
                    leftMost = node->right;
                }
                if (left != nullptr) {
                    left->next = node->right;
                }
                left = node->right;
            }
            node = node->next;
        }
    }
}

// 133. Clone Graph
// Clone an undirected graph. Each node in the graph contains a label and a list
// of its neighbors. OJ's undirected graph serialization: Nodes are labeled
// uniquely. We use # as a separator for each node, and , as a separator for
// node label and each neighbor of the node. As an example, consider the
// serialized graph { 0,1,2#1,2#2,2 }. The graph has a total of three nodes, and
// therefore contains three parts as separated by #. First node is labeled as 0.
// Connect node 0 to both nodes 1 and 2. Second node is labeled as 1. Connect
// node 1 to node 2. Third node is labeled as 2. Connect node 2 to node 2
// (itself), thus forming a self-cycle. Visually, the graph looks like the
// following :
//    1
//   /  \
//  /    \
// 0 -- - 2
//       / \
//       \_/
struct UndirectedGraphNode {
    int label;
    vector<UndirectedGraphNode *> neighbors;
    UndirectedGraphNode(int x) : label(x){};
};
static UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
    map<int, UndirectedGraphNode *> cloned;
    function<UndirectedGraphNode *(UndirectedGraphNode *)> clone =
        [&](UndirectedGraphNode *n) -> UndirectedGraphNode * {
        if (n == nullptr)
            return nullptr;
        if (cloned.find(n->label) != cloned.end())
            return cloned[n->label];
        UndirectedGraphNode *copy = new UndirectedGraphNode(n->label);
        cloned[n->label] = copy;
        for (size_t i = 0; i < n->neighbors.size(); i++) {
            int label = n->neighbors[i]->label;
            if (cloned.find(label) == cloned.end()) {
                cloned[label] = clone(n->neighbors[i]);
            }
            copy->neighbors.push_back(cloned[label]);
        }
        return copy;
    };
    return clone(node);
}

struct RandomListNode {
    int label;
    RandomListNode *next, *random;
    RandomListNode(int x) : label(x), next(nullptr), random(nullptr) {}
};
// 138. Copy List with Random Pointer
// A linked list is given such that each node contains an additional random
// pointer which could point to any node in the list or null. Return a deep copy
// of the list.
static RandomListNode *copyRandomList(RandomListNode *head) {
    map<RandomListNode *, RandomListNode *> copied;
    function<RandomListNode *(RandomListNode *)> copy =
        [&](RandomListNode *node) -> RandomListNode * {
        if (node == nullptr)
            return nullptr;
        RandomListNode *c = new RandomListNode(node->label);
        copied[node] = c;
        if (copied.find(node->next) == copied.end()) {
            copied[node->next] = copy(node->next);
        }
        c->next = copied[node->next];
        if (copied.find(node->random) == copied.end()) {
            copied[node->random] = copy(node->random);
        }
        c->random = copied[node->random];
        return c;
    };
    return copy(head);
}
} // namespace LeetCode
} // namespace Test

#endif
