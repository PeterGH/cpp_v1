#ifndef _LEETCODE_H_
#define _LEETCODE_H_

#include <algorithm>
#include <functional>
#include <limits.h>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <unordered_map>
#include <vector>

using namespace std;

namespace Test {
namespace LeetCode {

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// 95. Unique Binary Search Trees II
// Given an integer n, generate all structurally unique BST's (binary search
// trees) that store values 1...n. For example, Given n = 3, your program should
// return all 5 unique BST's shown below.
//  1         3     3      2      1
//   \       /     /      / \      \
//    3     2     1      1   3      2
//   /     /       \                 \
//  2     1         2                 3
static vector<TreeNode *> generateTrees(int n) {
    if (n <= 0)
        return vector<TreeNode *>{};
    function<vector<vector<int>>(int, int)> generateSerializations =
        [&](int i, int j) -> vector<vector<int>> {
        vector<vector<int>> serializations;
        if (i > j) {
            serializations.push_back(vector<int>{0});
        } else {
            for (int k = i; k <= j; k++) {
                vector<vector<int>> leftSerializations =
                    generateSerializations(i, k - 1);
                vector<vector<int>> rightSerializations =
                    generateSerializations(k + 1, j);
                for (size_t l = 0; l < leftSerializations.size(); l++) {
                    for (size_t r = 0; r < rightSerializations.size(); r++) {
                        vector<int> serialization = {k};
                        serialization.insert(serialization.end(),
                                             leftSerializations[l].begin(),
                                             leftSerializations[l].end());
                        serialization.insert(serialization.end(),
                                             rightSerializations[r].begin(),
                                             rightSerializations[r].end());
                        serializations.push_back(serialization);
                    }
                }
            }
        }
        return serializations;
    };
    function<TreeNode *(size_t &, vector<int> &)> generateTree =
        [&](size_t &i, vector<int> &serialization) -> TreeNode * {
        if (i >= serialization.size())
            return nullptr;
        if (serialization[i] == 0) {
            i++;
            return nullptr;
        }
        TreeNode *node = new TreeNode(serialization[i++]);
        node->left = generateTree(i, serialization);
        node->right = generateTree(i, serialization);
        return node;
    };
    vector<vector<int>> serializations = generateSerializations(1, n);
    vector<TreeNode *> trees;
    for (size_t i = 0; i < serializations.size(); i++) {
        size_t j = 0;
        trees.push_back(generateTree(j, serializations[i]));
    }
    return trees;
}
// incomplete
static vector<TreeNode *> generateTrees_2(int n) {
    if (n <= 0)
        return vector<TreeNode *>{};
    function<vector<TreeNode *>(int, int)> solve =
        [&](int i, int j) -> vector<TreeNode *> {
        if (i > j) {
            return vector<TreeNode *>{nullptr};
        }
        if (i == j) {
            return vector<TreeNode *>{new TreeNode(i)};
        }
        for (int k = i; k <= j; k++) {
            vector<TreeNode *> leftChildren = solve(i, k - 1);
            vector<TreeNode *> rightChildren = solve(k + 1, j);
        }
        return vector<TreeNode *>{};
    };
    return solve(1, n);
}

// 96. Unique Binary Search Trees
// Given n, how many structurally unique BST's (binary search trees) that store
// values 1...n? For example, Given n = 3, there are a total of 5 unique BST's.
// 1         3     3      2      1
//  \       /     /      / \      \
//   3     2     1      1   3      2
//  /     /       \                 \
// 2     1         2                 3
static int numTrees(int n) {
    if (n <= 0)
        return 0;
    map<pair<int, int>, int> solved;
    function<int(int, int)> count = [&](int i, int j) -> int {
        if (i >= j)
            return 1;
        pair<int, int> p = make_pair(i, j);
        if (solved.find(p) != solved.end())
            return solved[p];
        int c = 0;
        for (int k = i; k <= j; k++) {
            c += (count(i, k - 1) * count(k + 1, j));
        }
        solved[p] = c;
        return c;
    };
    return count(1, n);
}
// c[n] = c[0]*c[n-1] + c[1]*c[n-2] + ... + c[n-2]*c[1] + c[n-1]*c[0]
static int numTrees2(int n) {
    if (n <= 0)
        return 0;
    vector<int> count(n + 1, 0);
    count[0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < i; j++) {
            count[i] += count[j] * count[i - j - 1];
        }
    }
    return count[n];
}

// 98. Validate Binary Search Tree
// Given a binary tree, determine if it is a valid binary search tree (BST).
// Assume a BST is defined as follows: The left subtree of a node contains only
// nodes with keys less than the node's key. The right subtree of a node
// contains only nodes with keys greater than the node's key. Both the left and
// right subtrees must also be binary search trees. Example 1:
//   2
//  / \
// 1   3
// Binary tree [2, 1, 3], return true. Example 2:
//   1
//  / \
// 2   3
// Binary tree [1, 2, 3], return false.
// In-order traverse and check whether values are increasing.
static bool isValidBST(TreeNode *root) {
    stack<TreeNode *> path;
    TreeNode *node = root;
    TreeNode *prev = nullptr;
    while (!path.empty() || node != nullptr) {
        if (node != nullptr) {
            // Move left as much as possible
            path.push(node);
            node = node->left;
        } else {
            // == case 1 ========
            // node is null and is the left child of the top of stack
            //   top
            //   / \
            // null ...
            // == case 2 ========
            // node is null and is the right child of the last visited node
            //     top
            //     /
            //    o
            //   / \
            // null ...
            //       \
            //        o <-- last visited (prev)
            //       / \
            //    null null
            // In both cases, left subtree is done, the top is the one to visit
            node = path.top();
            // Pop the top because no need to visit it again
            path.pop();
            // Visit current node
            if (prev != nullptr && prev->val >= node->val)
                return false;
            prev = node;
            // Move right
            node = node->right;
        }
    }
    return true;
}
static bool isValidBST2(TreeNode *root) {
    if (root == nullptr)
        return true;
    stack<TreeNode *> path;
    path.push(root);
    TreeNode *node = root;
    TreeNode *prev = nullptr;
    TreeNode *lastVisited = nullptr;
    while (!path.empty()) {
        node = path.top();
        if (node->right != nullptr && node->right == lastVisited) {
            lastVisited = node;
            path.pop();
        } else if (node->left != nullptr && node->left != lastVisited) {
            lastVisited = node;
            path.push(node->left);
        } else {
            if (prev != nullptr && prev->val >= node->val)
                return false;
            prev = node;
            lastVisited = node;
            if (node->right != nullptr)
                path.push(node->right);
            else
                path.pop();
        }
    }
    return true;
}
static bool isValidBST3(TreeNode *root) {
    function<bool(TreeNode *, int &, int &)> verify =
        [&](TreeNode *node, int &min, int &max) -> bool {
        if (node == nullptr)
            return true;
        if (node->left == nullptr && node->right == nullptr) {
            min = node->val;
            max = node->val;
            return true;
        }

        if (node->left == nullptr) {
            min = node->val;
        } else {
            int leftMin;
            int leftMax;
            if (!verify(node->left, leftMin, leftMax))
                return false;
            if (leftMax >= node->val)
                return false;
            min = leftMin;
        }

        if (node->right == nullptr) {
            max = node->val;
        } else {
            int rightMin;
            int rightMax;
            if (!verify(node->right, rightMin, rightMax))
                return false;
            if (rightMin <= node->val)
                return false;
            max = rightMax;
        }

        return true;
    };

    int min;
    int max;
    return verify(root, min, max);
}

// 100. Same Tree
// Given two binary trees, write a function to check if they are equal or not.
// Two binary trees are considered equal if they are structurally identical and
// the nodes have the same value.
static bool isSameTree(TreeNode *p, TreeNode *q) {
    function<bool(TreeNode *, TreeNode *)> isSame =
        [&](TreeNode *node1, TreeNode *node2) -> bool {
        if (node1 == nullptr && node2 == nullptr)
            return true;
        if (node1 == nullptr || node2 == nullptr)
            return false;
        if (node1->val != node2->val)
            return false;
        if (!isSame(node1->left, node2->left))
            return false;
        return isSame(node1->right, node2->right);
    };
    return isSame(p, q);
}

// 101. Symmetric Tree
// Given a binary tree, check whether it is a mirror of itself (ie, symmetric
// around its center). For example, this binary tree [1, 2, 2, 3, 4, 4, 3] is
// symmetric :
//     1
//    / \
//   2   2
//  / \ / \
// 3  4 4  3
// But the following[1, 2, 2, null, 3, null, 3] is not:
//   1
//  / \
// 2   2
//  \   \
//   3   3
// Note: Bonus points if you could solve it both recursively and iteratively.
static bool isSymmetric(TreeNode *root) {
    function<bool(TreeNode *, TreeNode *)> isSame =
        [&](TreeNode *node1, TreeNode *node2) -> bool {
        if (node1 == nullptr && node2 == nullptr)
            return true;
        if (node1 == nullptr || node2 == nullptr)
            return false;
        if (node1->val != node2->val)
            return false;
        if (!isSame(node1->left, node2->right))
            return false;
        return isSame(node1->right, node2->left);
    };
    return isSame(root, root);
}
static bool isSymmetric_2(TreeNode *root) {
    deque<TreeNode *> deq;
    deq.push_front(root);
    deq.push_back(root);
    TreeNode *node1;
    TreeNode *node2;
    while (!deq.empty()) {
        node1 = deq.front();
        deq.pop_front();
        node2 = deq.back();
        deq.pop_back();
        if (node1 == nullptr && node2 == nullptr)
            continue;
        if (node1 == nullptr || node2 == nullptr)
            return false;
        if (node1->val != node2->val)
            return false;
        deq.push_front(node1->right);
        deq.push_front(node1->left);
        deq.push_back(node2->left);
        deq.push_back(node2->right);
    }
    return true;
}

// 110. Balanced Binary Tree
// Given a binary tree, determine if it is height-balanced. For this problem,
// a height-balanced binary tree is defined as a binary tree in which the depth
// of the two subtrees of every node never differ by more than 1.
static bool isBalanced(TreeNode *root) {
    function<bool(TreeNode *, int &)> solve = [&](TreeNode *node,
                                                  int &depth) -> bool {
        if (node == nullptr) {
            depth = 0;
            return true;
        }
        int leftDepth;
        if (!solve(node->left, leftDepth))
            return false;
        int rightDepth;
        if (!solve(node->right, rightDepth))
            return false;
        if (abs(leftDepth - rightDepth) > 1)
            return false;
        depth = 1 + max(leftDepth, rightDepth);
        return true;
    };
    int depth;
    return solve(root, depth);
}

// 102. Binary Tree Level Order Traversal
// Given a binary tree, return the level order traversal of its nodes' values.
// (ie, from left to right, level by level). For example :
// Given binary tree [3, 9, 20, null, null, 15, 7],
//   3
//  / \
// 9  20
//    / \
//  15   7
// return its level order traversal as :
// [
//  [3],
//  [9, 20],
//  [15, 7]
// ]
static vector<vector<int>> levelOrder(TreeNode *root) {
    vector<vector<int>> result;
    if (root == nullptr)
        return result;
    queue<TreeNode *> q[2];
    q[0].push(root);
    int level = 0;
    while (!q[0].empty() || !q[1].empty()) {
        int currentLevel = level % 2;
        int nextLevel = (level + 1) % 2;
        vector<int> v;
        TreeNode *node;
        while (!q[currentLevel].empty()) {
            node = q[currentLevel].front();
            q[currentLevel].pop();
            v.push_back(node->val);
            if (node->left != nullptr)
                q[nextLevel].push(node->left);
            if (node->right != nullptr)
                q[nextLevel].push(node->right);
        }
        result.push_back(v);
        level++;
    }
    return result;
}

// 103. Binary Tree Zigzag Level Order Traversal
// Given a binary tree, return the zigzag level order traversal of its nodes'
// values. (ie, from left to right, then right to left for the next level and
// alternate between). For example :
// Given binary tree [3, 9, 20, null, null, 15, 7],
//   3
//  / \
// 9  20
//    / \
//  15   7
// return its zigzag level order traversal as :
// [
//  [3],
//  [20, 9],
//  [15, 7]
// ]
static vector<vector<int>> zigzagLevelOrder(TreeNode *root) {
    vector<vector<int>> result;
    if (root == nullptr)
        return result;
    deque<TreeNode *> q[2];
    int level = 0;
    bool leftToRight = true;
    q[0].push_back(root);
    while (!q[0].empty() || !q[1].empty()) {
        int currentLevel = level % 2;
        int nextLevel = (level + 1) % 2;
        vector<int> v;
        TreeNode *node;
        if (leftToRight) {
            while (!q[currentLevel].empty()) {
                node = q[currentLevel].front();
                q[currentLevel].pop_front();
                v.push_back(node->val);
                if (node->left != nullptr)
                    q[nextLevel].push_back(node->left);
                if (node->right != nullptr)
                    q[nextLevel].push_back(node->right);
            }
        } else {
            while (!q[currentLevel].empty()) {
                node = q[currentLevel].back();
                q[currentLevel].pop_back();
                v.push_back(node->val);
                if (node->right != nullptr)
                    q[nextLevel].push_front(node->right);
                if (node->left != nullptr)
                    q[nextLevel].push_front(node->left);
            }
        }
        result.push_back(v);
        level++;
        leftToRight = !leftToRight;
    }
    return result;
}

// 107. Binary Tree Level Order Traversal II
// Given a binary tree, return the bottom-up level order traversal of its nodes'
// values. (ie, from left to right, level by level from leaf to root). For
// example : Given binary tree [3, 9, 20, null, null, 15, 7],
//   3
//  / \
// 9  20
//    / \
//  15   7
// return its bottom - up level order traversal as :
// [
//   [15, 7],
//   [9, 20],
//   [3]
// ]
static vector<vector<int>> levelOrderBottom(TreeNode *root) {
    vector<vector<int>> result;
    if (root == nullptr)
        return result;
    queue<TreeNode *> q[2];
    q[0].push(root);
    int level = 0;
    TreeNode *node;
    while (!q[0].empty() || !q[1].empty()) {
        int currentLevel = level % 2;
        int nextLevel = (level + 1) % 2;
        vector<int> v;
        while (!q[currentLevel].empty()) {
            node = q[currentLevel].front();
            q[currentLevel].pop();
            v.push_back(node->val);
            if (node->left != nullptr)
                q[nextLevel].push(node->left);
            if (node->right != nullptr)
                q[nextLevel].push(node->right);
        }
        result.insert(result.begin(), v);
        level++;
    }
    return result;
}

// 199. Binary Tree Right Side View
// Given a binary tree, imagine yourself standing on the right side of it,
// return the values of the nodes you can see ordered from top to bottom.
// For example: Given the following binary tree,
//   1      <---
//  / \
// 2   3    <---
//  \   \
//   5   4  <---
// You should return [1, 3, 4].
static vector<int> rightSideView(TreeNode *root) {
    vector<int> result;
    if (root == nullptr)
        return result;
    queue<TreeNode *> q[2];
    q[0].push(root);
    int level = 0;
    int current = 0;
    int next = 0;
    TreeNode *p;
    while (!q[0].empty() || !q[1].empty()) {
        current = level % 2;
        next = (level + 1) % 2;
        p = q[current].front();
        result.push_back(p->val);
        while (!q[current].empty()) {
            p = q[current].front();
            q[current].pop();
            if (p->right != nullptr) {
                q[next].push(p->right);
            }
            if (p->left != nullptr) {
                q[next].push(p->left);
            }
        }
        level++;
    }
    return result;
}

// 104. Maximum Depth of Binary Tree
// Given a binary tree, find its maximum depth. The maximum depth is the number
// of nodes along the longest path from the root node down to the farthest leaf
// node.
static int maxDepth(TreeNode *root) {
    function<int(TreeNode *)> depth = [&](TreeNode *node) -> int {
        if (node == nullptr)
            return 0;
        if (node->left == nullptr && node->right == nullptr)
            return 1;
        return 1 + max(depth(node->left), depth(node->right));
    };
    return depth(root);
}
// This is wrong
static int maxDepth_2(TreeNode *root) {
    if (root == nullptr)
        return 0;
    stack<TreeNode *> path;
    path.push(root);
    TreeNode *node;
    int depth = 1;
    int maxDepth = 0;
    while (!path.empty()) {
        if (depth > maxDepth) {
            maxDepth = depth;
        }
        node = path.top();
        path.pop();
        if (node->right == nullptr && node->left == nullptr) {
            depth--;
        } else {
            depth++;
            if (node->right != nullptr)
                path.push(node->right);
            if (node->left != nullptr)
                path.push(node->left);
        }
    }
    return maxDepth;
}

// 111. Minimum Depth of Binary Tree
// Given a binary tree, find its minimum depth. The minimum depth is the number
// of nodes along the shortest path from the root node down to the nearest leaf
// node.
static int minDepth(TreeNode *root) {
    function<int(TreeNode *, int)> solve = [&](TreeNode *node,
                                               int depth) -> int {
        if (node == nullptr)
            return depth;
        depth++;
        if (node->left == nullptr)
            return solve(node->right, depth);
        else if (node->right == nullptr)
            return solve(node->left, depth);
        else
            return min(solve(node->left, depth), solve(node->right, depth));
    };
    return solve(root, 0);
}

// 105. Construct Binary Tree from Preorder and Inorder Traversal
// Given preorder and inorder traversal of a tree, construct the binary tree.
// Note: You may assume that duplicates do not exist in the tree.
static TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
    function<TreeNode *(int, int, int, int)> build = [&](int i1, int i2, int j1,
                                                         int j2) -> TreeNode * {
        if (i1 > i2)
            return nullptr;
        TreeNode *node = new TreeNode(preorder[i1]);
        int k;
        for (k = j1; k <= j2; k++) {
            if (preorder[i1] == inorder[k])
                break;
        }
        if (k <= j2) {
            node->left = build(i1 + 1, i1 + k - j1, j1, k - 1);
            node->right = build(i1 + k - j1 + 1, i2, k + 1, j2);
        }
        return node;
    };
    return build(0, preorder.size() - 1, 0, inorder.size() - 1);
}

// 106. Construct Binary Tree from Inorder and Postorder Traversal
// Given inorder and postorder traversal of a tree, construct the binary tree.
// Note: You may assume that duplicates do not exist in the tree.
static TreeNode *buildTreeInOrderPostOrder(vector<int> &inorder,
                                           vector<int> &postorder) {
    function<TreeNode *(int, int, int, int)> build = [&](int i1, int i2, int j1,
                                                         int j2) -> TreeNode * {
        if (j1 > j2)
            return nullptr;
        TreeNode *node = new TreeNode(postorder[j2]);
        int k;
        for (k = i1; k <= i2; k++) {
            if (inorder[k] == postorder[j2])
                break;
        }
        if (k <= i2) {
            node->left = build(i1, k - 1, j1, j2 - i2 + k - 1);
            node->right = build(k + 1, i2, j2 - i2 + k, j2 - 1);
        }
        return node;
    };
    return build(0, inorder.size() - 1, 0, postorder.size() - 1);
}

// 108. Convert Sorted Array to Binary Search Tree
// Given an array where elements are sorted in ascending order, convert it to a
// height balanced BST.
static TreeNode *sortedArrayToBST(vector<int> &nums) {
    function<TreeNode *(int, int)> build = [&](int i, int j) -> TreeNode * {
        if (i > j)
            return nullptr;
        int k = i + ((j - i) >> 1);
        TreeNode *node = new TreeNode(nums[k]);
        node->left = build(i, k - 1);
        node->right = build(k + 1, j);
        return node;
    };
    return build(0, nums.size() - 1);
}

// 109. Convert Sorted List to Binary Search Tree
// Given a singly linked list where elements are sorted in ascending order,
// convert it to a height balanced BST.
static TreeNode *sortedListToBST(ListNode *head) {
    if (head == nullptr)
        return nullptr;
    if (head->next == nullptr)
        return new TreeNode(head->val);
    function<TreeNode *(ListNode *, ListNode *)> build =
        [&](ListNode *b, ListNode *e) -> TreeNode * {
        if (b == nullptr || e == nullptr)
            return nullptr;
        TreeNode *node;
        if (b == e) {
            node = new TreeNode(b->val);
        } else if (b->next == e) {
            node = new TreeNode(b->val);
            node->right = new TreeNode(e->val);
        } else {
            ListNode *p = b;
            ListNode *q = p->next->next;
            while (q != e && q->next != e) {
                p = p->next;
                q = q->next;
                q = q->next;
            }
            node = new TreeNode(p->next->val);
            node->left = build(b, p);
            node->right = build(p->next->next, e);
        }
        return node;
    };
    ListNode *p = head;
    ListNode *q = p->next;
    while (q->next != nullptr && q->next->next != nullptr) {
        p = p->next;
        q = q->next;
        q = q->next;
    }
    TreeNode *node = new TreeNode(p->next->val);
    node->left = build(head, p);
    node->right = build(p->next->next, q->next == nullptr ? q : q->next);
    return node;
}

// 114. Flatten Binary Tree to Linked List
// Given a binary tree, flatten it to a linked list in-place. For example, Given
//     1
//    / \
//   2   5
//  / \   \
// 3   4   6
// The flattened tree should look like:
// 1
//  \
//   2
//    \
//     3
//      \
//       4
//        \
//         5
//          \
//           6
static void flatten(TreeNode *root) {
    function<TreeNode *(TreeNode *)> solve = [&](TreeNode *node) -> TreeNode * {
        if (node == nullptr)
            return nullptr;
        if (node->left == nullptr && node->right == nullptr) {
            return node;
        }
        TreeNode *leftTail = solve(node->left);
        TreeNode *rightTail = solve(node->right);
        if (leftTail != nullptr) {
            leftTail->right = node->right;
            node->right = node->left;
            node->left = nullptr;
        }
        return rightTail == nullptr ? leftTail : rightTail;
    };
    solve(root);
}

// 173. Binary Search Tree Iterator
// Implement an iterator over a binary search tree (BST). Your iterator will be
// initialized with the root node of a BST. Calling next() will return the next
// smallest number in the BST. Note: next() and hasNext() should run in average
// O(1) time and uses O(h) memory, where h is the height of the tree.
class BSTIterator {
  private:
    stack<TreeNode *> _stack;
    TreeNode *_node;

  public:
    BSTIterator(TreeNode *root) { _node = root; }

    /** @return whether we have a next smallest number */
    bool hasNext() { return !_stack.empty() || _node != nullptr; }

    /** @return the next smallest number */
    int next() {
        int val;
        while (hasNext()) {
            if (_node != nullptr) {
                _stack.push(_node);
                _node = _node->left;
            } else {
                _node = _stack.top();
                _stack.pop();
                val = _node->val;
                _node = _node->right;
                break;
            }
        }
        return val;
    }
};

struct TreeLinkNode {
    TreeLinkNode *left;
    TreeLinkNode *right;
    TreeLinkNode *next;
};

// 116. Populating Next Right Pointers in Each Node
// Given a binary tree Populate each next pointer to point to its next right
// node. If there is no next right node, the next pointer should be set to NULL.
// Initially, all next pointers are set to NULL. Note: You may only use constant
// extra space. You may assume that it is a perfect binary tree (ie, all leaves
// are at the same level, and every parent has two children). For example, Given
// the following perfect binary tree,
//      1
//    /   \
//   2     3
//  / \   / \
// 4   5 6   7
// After calling your function, the tree should look like :
//      1->NULL
//    /   \
//   2 ->  3->NULL
//  / \   / \
// 4-> 5->6->7->NULL
static void connect(TreeLinkNode *root) {
    TreeLinkNode *leftMost = root;
    while (leftMost != nullptr && leftMost->left != nullptr) {
        TreeLinkNode *node = leftMost;
        leftMost = leftMost->left;
        TreeLinkNode *left = nullptr;
        while (node != nullptr) {
            if (left != nullptr) {
                left->next = node->left;
            }
            node->left->next = node->right;
            left = node->right;
            node = node->next;
        }
    }
}

// 117. Populating Next Right Pointers in Each Node II
// Follow up for problem "Populating Next Right Pointers in Each Node". What if
// the given tree could be any binarytree ? Would your previous solution still
// work? Note: You may only use constant extra space. For example, Given the
// following binary tree,
//     1
//    / \
//   2    3
//  / \    \
// 4   5    7
// After calling your function, the tree should look like :
//     1->NULL
//    / \
//   2 -> 3->NULL
//  / \    \
// 4-> 5 -> 7->NULL
static void connect2(TreeLinkNode *root) {
    TreeLinkNode *leftMost = root;
    while (leftMost != nullptr) {
        TreeLinkNode *node = leftMost;
        leftMost = nullptr;
        TreeLinkNode *left = nullptr;
        while (node != nullptr) {
            if (node->left != nullptr) {
                if (leftMost == nullptr) {
                    leftMost = node->left;
                }
                if (left != nullptr) {
                    left->next = node->left;
                }
                left = node->left;
            }
            if (node->right != nullptr) {
                if (leftMost == nullptr) {
                    leftMost = node->right;
                }
                if (left != nullptr) {
                    left->next = node->right;
                }
                left = node->right;
            }
            node = node->next;
        }
    }
}

// 133. Clone Graph
// Clone an undirected graph. Each node in the graph contains a label and a list
// of its neighbors. OJ's undirected graph serialization: Nodes are labeled
// uniquely. We use # as a separator for each node, and , as a separator for
// node label and each neighbor of the node. As an example, consider the
// serialized graph { 0,1,2#1,2#2,2 }. The graph has a total of three nodes, and
// therefore contains three parts as separated by #. First node is labeled as 0.
// Connect node 0 to both nodes 1 and 2. Second node is labeled as 1. Connect
// node 1 to node 2. Third node is labeled as 2. Connect node 2 to node 2
// (itself), thus forming a self-cycle. Visually, the graph looks like the
// following :
//    1
//   /  \
//  /    \
// 0 -- - 2
//       / \
//       \_/
struct UndirectedGraphNode {
    int label;
    vector<UndirectedGraphNode *> neighbors;
    UndirectedGraphNode(int x) : label(x){};
};
static UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
    map<int, UndirectedGraphNode *> cloned;
    function<UndirectedGraphNode *(UndirectedGraphNode *)> clone =
        [&](UndirectedGraphNode *n) -> UndirectedGraphNode * {
        if (n == nullptr)
            return nullptr;
        if (cloned.find(n->label) != cloned.end())
            return cloned[n->label];
        UndirectedGraphNode *copy = new UndirectedGraphNode(n->label);
        cloned[n->label] = copy;
        for (size_t i = 0; i < n->neighbors.size(); i++) {
            int label = n->neighbors[i]->label;
            if (cloned.find(label) == cloned.end()) {
                cloned[label] = clone(n->neighbors[i]);
            }
            copy->neighbors.push_back(cloned[label]);
        }
        return copy;
    };
    return clone(node);
}

struct RandomListNode {
    int label;
    RandomListNode *next, *random;
    RandomListNode(int x) : label(x), next(nullptr), random(nullptr) {}
};
// 138. Copy List with Random Pointer
// A linked list is given such that each node contains an additional random
// pointer which could point to any node in the list or null. Return a deep copy
// of the list.
static RandomListNode *copyRandomList(RandomListNode *head) {
    map<RandomListNode *, RandomListNode *> copied;
    function<RandomListNode *(RandomListNode *)> copy =
        [&](RandomListNode *node) -> RandomListNode * {
        if (node == nullptr)
            return nullptr;
        RandomListNode *c = new RandomListNode(node->label);
        copied[node] = c;
        if (copied.find(node->next) == copied.end()) {
            copied[node->next] = copy(node->next);
        }
        c->next = copied[node->next];
        if (copied.find(node->random) == copied.end()) {
            copied[node->random] = copy(node->random);
        }
        c->random = copied[node->random];
        return c;
    };
    return copy(head);
}
} // namespace LeetCode
} // namespace Test

#endif
