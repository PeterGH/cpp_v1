#ifndef _LEETCODE_H_
#define _LEETCODE_H_

#include <algorithm>
#include <functional>
#include <limits.h>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <unordered_map>
#include <vector>

using namespace std;

namespace Test {
namespace LeetCode {

// 6. ZigZag Conversion
// "PAYPALISHIRING"
// P   A   H   N
// A P L S I I G
// Y   I   R
// "PAHNAPLSIIGYIR"
// @string
static string convert(string s, int numRows) {
    string output;
    int len = s.size();
    int delta = numRows == 1 ? 1 : (numRows << 1) - 2;
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j < len; j += delta) {
            if (j + i < len)
                output.append(1, s[j + i]);
            if (i != 0 && i != (numRows - 1) && (j + delta - i < len))
                output.append(1, s[j + delta - i]);
        }
    }
    return output;
}

// 58. Length of Last Word
// Given a string s consists of upper/lower-case alphabets and empty space
// characters ' ', return the length of last word in the string. If the last
// word does not exist, return 0. Note: A word is defined as a character
// sequence consists of non-space characters only. For example, Given
// s = "Hello World", return 5.
// @string
static int lengthOfLastWord(string s) {
    int length = 0;
    size_t i = 0;
    while (i < s.size()) {
        if (s[i] != ' ') {
            size_t j = 0;
            while ((i + j) < s.size() && s[i + j] != ' ')
                j++;
            length = j;
            i += j;
        } else {
            i++;
        }
    }
    return length;
}
// @string
static int lengthOfLastWord2(string s) {
    int length = 0;
    int i = s.size() - 1;
    while (i >= 0 && s[i] == ' ')
        i--;
    while (i >= 0 && s[i] != ' ') {
        length++;
        i--;
    }
    return length;
}
static int lengthOfLastWord3(const char *s) {
    if (*s == '\0')
        return 0;
    while (*s == ' ')
        s++;
    int i = 0;
    while (*s != '\0') {
        while (*s != '\0' && *s != ' ') {
            i++;
            s++;
        }
        while (*s == ' ')
            s++;
        if (*s != '\0')
            i = 0;
    }
    return i;
}
static int lengthOfLastWord4(string s) {
    int length = 0;
    size_t i = 0;
    int n = 0; // count every word encountered
    while (i < s.size()) {
        if (s[i] == ' ') {
            if (n > 0) {
                length = n;
                n = 0;
            }
        } else {
            n++;
        }
        i++;
    }
    return n > 0 ? n : length;
}
// 151. Reverse Words in a String
// Given an input string, reverse the string word by word. For example, Given
// s = "the sky is blue", return "blue is sky the". Update(2015-02-12): For C
// programmers: Try to solve it in-place in O(1) space. Clarification: What
// constitutes a word? A sequence of non-space characters constitutes a word.
// Could the input string contain leading or trailing spaces? Yes. However, your
// reversed string should not contain leading or trailing spaces. How about
// multiple spaces between two words? Reduce them to a single space in the
// reversed string.
static void reverseWords(string &s) {
    if (s.empty())
        return;
    // step 1: remove extra spaces
    int i = -1;
    size_t j = 0;
    while (j < s.length() && s[j] == ' ')
        j++;
    if (j == s.length()) {
        s.resize(0);
        return;
    }
    while (j < s.length()) {
        if (s[j] != ' ' || s[j - 1] != ' ') {
            i++;
            if (i < (int)j)
                s[i] = s[j];
        }
        j++;
    }
    if (0 <= i && s[i] == ' ')
        i--;
    s.resize(i + 1);
    // step 2: reverse words
    function<void(int, int)> reverse = [&](int b, int e) {
        while (b < e) {
            swap(s[b++], s[e--]);
        }
    };
    reverse(0, s.length() - 1);
    i = 0;
    j = 0;
    while (j <= s.length()) {
        if (j == s.length() || s[j] == ' ') {
            reverse(i, j - 1);
            i = j + 1;
        }
        j++;
    }
}

// Given an array of words and a length L, format the text such that each line
// has exactly L characters and is fully (left and right) justified. You should
// pack your words in a greedy approach; that is, pack as many words as you can
// in each line. Pad extra spaces ' ' when necessary so that each line has
// exactly L characters. Extra spaces between words should be distributed as
// evenly as possible. If the number of spaces on a line do not divide evenly
// between words, the empty slots on the left will be assigned more spaces than
// the slots on the right. For the last line of text, it should be left
// justified and no extra space is inserted between words. For example, words:
// ["This", "is", "an", "example", "of", "text", "justification."] L: 16. Return
// the formatted lines as:
// [
//   "This    is    an",
//   "example  of text",
//   "justification.  "
// ]
// Note: Each word is guaranteed not to exceed L in length.
// Corner Cases:
// A line other than the last line might contain only one word. What should you
// do in this case? In this case, that line should be left-justified.
static vector<string> TextJustification(vector<string> &words, int L) {
    if (words.size() == 0)
        return vector<string>{};
    vector<string> output;
    int i = 0;
    int j = 0;
    int count = (int)words.size();
    int len = 0;
    while (i < count && j < count) {
        while (j < count && len + (int)words[j].length() + j - i <= L) {
            len += words[j].length();
            j++;
        }
        if (j == count) {
            // last line with words[i..j-1]
            string line;
            for (int k = i; k < j; k++) {
                if (k != i)
                    line.append(1, ' ');
                line.append(words[k]);
            }
            int extra = L - len - (j - 1 - i);
            if (extra > 0)
                line.append(extra, ' ');
            output.push_back(line);
            break;
        } else {
            // one line with words[i..j-1]
            string line(words[i]);
            int totalSpaces = L - len;
            int intervals = j - 1 - i;
            if (intervals == 0) {
                line.append(totalSpaces, ' ');
            } else {
                int spaces = totalSpaces / intervals;
                int extra = totalSpaces % intervals;
                for (int k = i + 1; k <= i + extra; k++) {
                    line.append(spaces + 1, ' ');
                    line.append(words[k]);
                }
                for (int k = i + extra + 1; k < j; k++) {
                    line.append(spaces, ' ');
                    line.append(words[k]);
                }
            }
            output.push_back(line);
            i = j;
            len = 0;
        }
    }
    return output;
}

// The n-queens puzzle is the problem of placing n queens on an nÃ—n chessboard
// such that no two queens attack each other. Given an integer n, return all
// distinct solutions to the n-queens puzzle. Each solution contains a distinct
// board configuration of the n-queens' placement, where 'Q' and '.' both
// indicate a queen and an empty space respectively. For example,
// There exist two distinct solutions to the 4-queens puzzle:
// [
//  [".Q..",  // Solution 1
//   "...Q",
//   "Q...",
//   "..Q."],
//  ["..Q.",  // Solution 2
//   "Q...",
//   "...Q",
//   ".Q.."]
// ]
static vector<vector<string>> NQueens(int n) {
    if (n <= 0)
        return vector<vector<string>>{};

    function<void(vector<string> &, int, vector<vector<string>> &)> solve =
        [&](vector<string> &board, size_t line,
            vector<vector<string>> &solutions) {
            for (size_t i = 0; i < board[line].size(); i++) {
                if (board[line][i] == '.') {
                    vector<string> next(board);
                    next[line][i] = 'Q';
                    if (line == board.size() - 1) {
                        for_each(next.begin(), next.end(), [&](string &l) {
                            for (size_t j = 0; j < l.length(); j++) {
                                if (l[j] == 'X')
                                    l[j] = '.';
                            }
                        });
                        solutions.push_back(next);
                    } else {
                        int a = i;
                        int b = i;
                        for (size_t j = line + 1; j < board.size(); j++) {
                            a--;
                            if (a >= 0)
                                next[j][a] = 'X';
                            next[j][i] = 'X';
                            b++;
                            if (b < (int)next[j].size())
                                next[j][b] = 'X';
                        }
                        solve(next, line + 1, solutions);
                    }
                }
            }
        };

    vector<vector<string>> solutions;
    vector<string> board(n, string(n, '.'));
    solve(board, 0, solutions);
    return solutions;
}

static int NQeensSolutionsCount(int n) {
    if (n <= 0)
        return 0;

    function<int(vector<vector<bool>> &, int)> count =
        [&](vector<vector<bool>> &board, int line) -> int {
        int c = 0;
        for (size_t i = 0; i < board[line].size(); i++) {
            if (board[line][i] == true) {
                if (line == (int)board.size() - 1)
                    c++;
                else {
                    vector<vector<bool>> next(board);
                    next[line][i] = false;
                    int a = i;
                    int b = i;
                    bool proceed = false;
                    for (size_t j = line + 1; j < board.size(); j++) {
                        a--;
                        if (a >= 0)
                            next[j][a] = false;
                        next[j][i] = false;
                        b++;
                        if (b < (int)next[j].size())
                            next[j][b] = false;
                        proceed = false;
                        for (size_t k = 0; k < next[j].size(); k++) {
                            if (next[j][k] == true) {
                                proceed = true;
                                break;
                            }
                        }
                        if (proceed == false)
                            break;
                    }
                    if (proceed)
                        c += count(next, line + 1);
                }
            }
        }
        return c;
    };

    vector<vector<bool>> board(n, vector<bool>(n, true));
    return count(board, 0);
}

// Write a program to solve a Sudoku puzzle by filling the empty cells.
// Empty cells are indicated by the character '.'.
// You may assume that there will be only one unique solution.
static void Sudoku(vector<vector<char>> &board) {
    function<void(int &, int, int &, int)> oneStep = [&](int &i, int r, int &j,
                                                         int c) {
        j++;
        j = j % c;
        if (j == 0) {
            i++;
            i = i % r;
        }
    };

    function<bool(vector<vector<char>> &, int, int, vector<set<char>> &,
                  vector<set<char>> &, vector<vector<set<char>>> &,
                  map<pair<int, int>, set<char>> &)>
        solve =
            [&](vector<vector<char>> &b, int i, int j,
                vector<set<char>> &row, // existing characters on every row
                vector<set<char>> &col, // existing characters on every column
                vector<vector<set<char>>>
                    cell, // existing characters in every 3x3 cell
                map<pair<int, int>, set<char>>
                    &m // available characters for every empty cell
                ) -> bool {
        while (i != (int)b.size() - 1 || j != (int)b[i].size() - 1) {
            if (b[i][j] == '.')
                break;
            oneStep(i, (int)b.size(), j, (int)b[i].size());
        }
        // Now (i, j) is either empty or it is the bottom-right element of b
        if (b[i][j] != '.')
            return true;
        pair<int, int> p = make_pair(i, j);
        for (set<char>::iterator it = m[p].begin(); it != m[p].end(); it++) {
            char c = *it;
            if (row[i].find(c) == row[i].end() &&
                col[j].find(c) == col[j].end() &&
                cell[i / 3][j / 3].find(c) == cell[i / 3][j / 3].end()) {
                b[i][j] = c;
                row[i].insert(c);
                col[j].insert(c);
                cell[i / 3][j / 3].insert(c);
                if (i == (int)b.size() - 1 && j == (int)b[i].size() - 1)
                    return true;
                int i1 = i;
                int j1 = j;
                oneStep(i1, (int)b.size(), j1, (int)b[i].size());
                if (solve(b, i1, j1, row, col, cell, m))
                    return true;
                b[i][j] = '.';
                row[i].erase(c);
                col[j].erase(c);
                cell[i / 3][j / 3].erase(c);
            }
        }
        return false;
    };

    if (board.size() == 0 || board[0].size() == 0)
        return;

    vector<set<char>> row = vector<set<char>>(9, set<char>{});
    vector<set<char>> col = vector<set<char>>(9, set<char>{});
    vector<vector<set<char>>> cell =
        vector<vector<set<char>>>(3, vector<set<char>>(3, set<char>{}));
    for (int i = 0; i < (int)board.size(); i++) {
        for (int j = 0; j < (int)board[i].size(); j++) {
            if (board[i][j] != '.') {
                row[i].insert(board[i][j]);
                col[j].insert(board[i][j]);
                cell[i / 3][j / 3].insert(board[i][j]);
            }
        }
    }
    map<pair<int, int>, set<char>> m;
    for (int i = 0; i < (int)board.size(); i++) {
        for (int j = 0; j < (int)board[i].size(); j++) {
            if (board[i][j] == '.') {
                pair<int, int> p = make_pair(i, j);
                m[p] = set<char>{};
                for (char c = '1'; c <= '9'; c++) {
                    if (row[i].find(c) == row[i].end() &&
                        col[j].find(c) == col[j].end() &&
                        cell[i / 3][j / 3].find(c) ==
                            cell[i / 3][j / 3].end()) {
                        m[p].insert(c);
                    }
                }
            }
        }
    }

    solve(board, 0, 0, row, col, cell, m);
    return;
}

// 36. Valid Sudoku
// Determine if a Sudoku is valid, according to: Sudoku Puzzles The Rules.
// The Sudoku board could be partially filled, where empty cells are filled with
// the character '.'. A partially filled sudoku which is valid. Note: A valid
// Sudoku board (partially filled) is not necessarily solvable. Only the filled
// cells need to be validated.
static bool isValidSudoku(vector<vector<char>> &board) {
    map<size_t, set<char>> rows;
    map<size_t, set<char>> cols;
    map<size_t, set<char>> grids;
    for (size_t i = 0; i < board.size(); i++) {
        if (rows.find(i) == rows.end())
            rows[i] = set<char>{};
        for (size_t j = 0; j < board[i].size(); j++) {
            if (i == 0 && cols.find(j) == cols.end())
                cols[j] = set<char>();
            if (i % 3 == 0 && j % 3 == 0 &&
                grids.find(i * 3 + j) == grids.end()) {
                grids[i * 3 + j] = set<char>{};
            }
            if (board[i][j] != '.') { // A real check may be against '0'-'9'
                if (rows[i].find(board[i][j]) != rows[i].end())
                    return false;
                rows[i].insert(board[i][j]);
                if (cols[j].find(board[i][j]) != cols[j].end())
                    return false;
                cols[j].insert(board[i][j]);
                auto k = (i / 3) * 3 + (j / 3);
                if (grids[k].find(board[i][j]) != grids[k].end())
                    return false;
                grids[k].insert(board[i][j]);
            }
        }
    }
    return true;
}

// Given a string s1, we may represent it as a binary tree by partitioning it to
// two non-empty substrings recursively. Below is one possible representation of
// s1 = "great":
//     great
//    /    \
//   gr    eat
//  / \    /  \
// g   r  e   at
//            / \
//           a   t
// To scramble the string, we may choose any non-leaf node and swap its two
// children. For example, if we choose the node "gr" and swap its two children,
// it produces a scrambled string "rgeat".
//     rgeat
//    /    \
//   rg    eat
//  / \    /  \
// r   g  e   at
//            / \
//           a   t
// We say that "rgeat" is a scrambled string of "great".
// Similarly, if we continue to swap the children of nodes "eat" and "at", it
// produces a scrambled string "rgtae".
//     rgtae
//    /    \
//   rg    tae
//  / \    /  \
// r   g  ta   e
//       / \
//      t   a
// We say that "rgtae" is a scrambled string of "great".
// Given two strings s1 and s2 of the same length, determine if s2 is a
// scrambled string of s1.
static bool IsScramble(const string &s1, const string &s2) {
    if (s1.length() != s2.length())
        return false;
    if (s1.length() == 0)
        return true;

    int len = s1.length();

    map<char, int> m1;
    map<char, int> m2;

    for (int i = 0; i < len; i++) {
        if (m1.find(s1[i]) == m1.end())
            m1[s1[i]] = 1;
        else
            m1[s1[i]] += 1;
        if (m2.find(s2[i]) == m2.end())
            m2[s2[i]] = 1;
        else
            m2[s2[i]] += 1;
        // TODO: do we still need further check once two maps are equal?
        if (Equal(m1, m2)) {
            // s1[0..i] and s2[0..i] may be scramble
            if (i == 0 || i == 1) {
                // s1[0] and s2[0], or s1[0..1] and s2[0..1] are scramble
                if (i == len - 1 || IsScramble(s1.substr(i + 1, len - 1 - i),
                                               s2.substr(i + 1, len - 1 - i)))
                    return true;
            } else if (i < len - 1) {
                if (IsScramble(s1.substr(0, i + 1), s2.substr(0, i + 1)) &&
                    IsScramble(s1.substr(i + 1, len - 1 - i),
                               s2.substr(i + 1, len - 1 - i)))
                    return true;
            }
        }
    }

    m1.clear();
    m2.clear();

    for (int i = 0; i < len; i++) {
        int j = len - 1 - i;
        if (m1.find(s1[j]) == m1.end())
            m1[s1[j]] = 1;
        else
            m1[s1[j]] += 1;
        if (m2.find(s2[i]) == m2.end())
            m2[s2[i]] = 1;
        else
            m2[s2[i]] += 1;
        if (Equal(m1, m2)) {
            // s1[len-1-i..len-1] and s2[0..i] may be scramble
            if (i == 0 || i == 1) {
                if (i == len - 1 || IsScramble(s1.substr(0, len - 1 - i),
                                               s2.substr(i + 1, len - 1 - i)))
                    return true;
            } else if (i < len - 1) {
                if (IsScramble(s1.substr(0, len - 1 - i),
                               s2.substr(i + 1, len - 1 - i)) &&
                    IsScramble(s1.substr(len - 1 - i, i + 1),
                               s2.substr(0, i + 1)))
                    return true;
            }
        }
    }

    return false;
}
static bool IsScramble2(const string &s1, const string &s2) {
    if (s1.length() != s2.length())
        return false;
    if (s1.length() == 0)
        return true;

    map<pair<int, int>, map<pair<int, int>, bool>> scramble;

    function<bool(int, int, int, int)> isScramble = [&](int i1, int i2, int j1,
                                                        int j2) -> bool {
        // check s1[i1..i2] and s2[j1..j2]
        pair<int, int> pi = make_pair(i1, i2);
        pair<int, int> pj = make_pair(j1, j2);

        if (scramble.find(pi) != scramble.end() &&
            scramble[pi].find(pj) != scramble[pi].end())
            return scramble[pi][pj];

        if (scramble.find(pi) == scramble.end())
            scramble[pi] = map<pair<int, int>, bool>{};

        if (scramble[pi].find(pj) == scramble[pi].end())
            scramble[pi][pj] = false;

        map<char, int> m1;
        map<char, int> m2;

        for (int i = i1, j = j1; i <= i2 && j <= j2; i++, j++) {
            if (m1.find(s1[i]) == m1.end())
                m1[s1[i]] = 1;
            else
                m1[s1[i]] += 1;
            if (m2.find(s2[j]) == m2.end())
                m2[s2[j]] = 1;
            else
                m2[s2[j]] += 1;
            if (Equal(m1, m2)) {
                // s1[i1..i] and s2[j1..j] may be scramble
                if (j - j1 <= 1) {
                    if (j == j2 || isScramble(i + 1, i2, j + 1, j2)) {
                        scramble[pi][pj] = true;
                        return true;
                    }
                } else if (j < j2) {
                    if (isScramble(i1, i, j1, j) &&
                        isScramble(i + 1, i2, j + 1, j2)) {
                        scramble[pi][pj] = true;
                        return true;
                    }
                }
            }
        }

        m1.clear();
        m2.clear();

        for (int i = i2, j = j1; i >= i1 && j <= j2; i--, j++) {
            if (m1.find(s1[i]) == m1.end())
                m1[s1[i]] = 1;
            else
                m1[s1[i]] += 1;
            if (m2.find(s2[j]) == m2.end())
                m2[s2[j]] = 1;
            else
                m2[s2[j]] += 1;
            if (Equal(m1, m2)) {
                // s1[i..i2] and s2[j1..j] may be scramble
                if (j - j1 <= 1) {
                    if (j == j2 || isScramble(i1, i - 1, j + 1, j2)) {
                        scramble[pi][pj] = true;
                        return true;
                    }
                } else if (j < j2) {
                    if (isScramble(i1, i - 1, j + 1, j2) &&
                        isScramble(i, i2, j1, j)) {
                        scramble[pi][pj] = true;
                        return true;
                    }
                }
            }
        }

        return false;
    };

    return isScramble(0, (int)s1.length() - 1, 0, (int)s2.length() - 1);
}

// Implement wildcard pattern matching with support for '?' and '*'.
// '?' Matches any single character.
// '*' Matches any sequence of characters (including the empty sequence).
// The matching should cover the entire input string (not partial).
// The function prototype should be:
// bool isMatch(const char *s, const char *p)
// Some examples:
// isMatch("aa","a") false
// isMatch("aa","aa") true
// isMatch("aaa","aa") false
// isMatch("aa", "*") true
// isMatch("aa", "a*") true
// isMatch("ab", "?*") true
// isMatch("aab", "c*a*b") false
static bool isMatch(const char *s, const char *p) {
    function<int(const char *)> length = [&](const char *c) -> int {
        // Count characters in c that is not '*'
        int i = 0;
        while (*c != '\0') {
            if (*c != '*')
                i++;
            c++;
        }
        return i;
    };

    function<bool(const char *, const char *,
                  map<pair<const char *, const char *>, bool> &)>
        isMatchInternal =
            [&](const char *s, const char *p,
                map<pair<const char *, const char *>, bool> &m) -> bool {
        pair<const char *, const char *> c = make_pair(s, p);
        if (m.find(c) != m.end())
            return m[c];

        m[c] = false;

        int i = length(s);
        int j = length(p);
        if (i < j)
            return false;

        while (*s != '\0' && *p != '\0' && (*s == *p || *p == '?')) {
            ++s;
            ++p;
        }
        // Now *s == '\0' || *p == '\0' || (*s != *p && *p != '?')
        if (*s == '\0' && *p == '\0') {
            m[c] = true;
            return true;
        }
        if (*p == '\0' || *p != '*')
            return false;
        // Now *p == '*'
        while (*p == '*')
            p++;
        // Now *p == '\0' || *p == '?' || *p != '*'
        while (*s != '\0' && i >= j) {
            if ((*s == *p || *p == '?') && isMatchInternal(s + 1, p + 1, m)) {
                m[c] = true;
                return true;
            }
            s++;
            i--;
        }
        m[c] = (*s == *p) && (i >= j);
        return m[c];
    };

    map<pair<const char *, const char *>, bool> m;
    return isMatchInternal(s, p, m);
}
// Implement regular expression matching with support for '.' and '*'.
// '.' Matches any single character.
// '*' Matches zero or more of the preceding element.
// The matching should cover the entire input string (not partial).
// The function prototype should be:
// bool isMatch(const char *s, const char *p)
// Some examples:
// isMatch("aa","a") â†’ false
// isMatch("aa","aa") â†’ true
// isMatch("aaa","aa") â†’ false
// isMatch("aa", "a*") â†’ true
// isMatch("aa", ".*") â†’ true
// isMatch("ab", ".*") â†’ true
// isMatch("aab", "c*a*b") â†’ true
static bool isMatch2(const char *s, const char *p) {
    while (*p == '*')
        p++;
    if (*s == '\0' && *p == '\0')
        return true;
    if (*p == '\0')
        return false;
    if (*(p + 1) != '*') {
        if (*s != '\0' && (*s == *p || *p == '.'))
            return isMatch2(++s, ++p);
        else
            return false;
    }
    // Now *(p + 1) == '*'
    while (*s != '\0' && (*s == *p || *p == '.')) {
        if (isMatch2(s, p + 2))
            return true;
        s++;
    }
    // *s and *p are not matching, skip *p because *(p + 1) is '*'
    return isMatch2(s, p + 2);
}

// Minimum Window Substring
// Given a string S and a string T, find the minimum window in S which will
// contain all the characters in T in complexity O(n).
// For example,
// S = "ADOBECODEBANC"
// T = "ABC"
// Minimum window is "BANC".
// Note: If there is no such window in S that covers all characters in T, return
// the emtpy string "". If there are multiple such windows, you are guaranteed
// that there will always be only one unique minimum window in S.
static string MinWindow(const string &s, const string &t) {
    if (s.empty() || t.empty() || s.length() < t.length())
        return "";

    map<char, int> countT;
    for (size_t i = 0; i < t.length(); i++) {
        if (countT.find(t[i]) == countT.end())
            countT[t[i]] = 1;
        else
            countT[t[i]] += 1;
    }

    // c1 count should be no less than c2 count
    auto compare = [&](map<char, int> &c1, map<char, int> &c2) -> bool {
        if (c1.size() != c2.size())
            return false;
        for (map<char, int>::iterator it = c1.begin(); it != c1.end(); it++) {
            if (c2.find(it->first) == c2.end())
                return false;
            if (c2[it->first] > it->second)
                return false;
        }
        return true;
    };

    map<char, int> countS;
    queue<pair<char, int>> indices;
    int begin = -1;
    int end = (int)s.length();
    for (int i = 0; i < (int)s.length(); i++) {
        if (countT.find(s[i]) != countT.end()) {
            if (countS.find(s[i]) == countS.end())
                countS[s[i]] = 1;
            else
                countS[s[i]] += 1;
            // indices contains a range of characters that are also in T
            indices.push(make_pair(s[i], i));
            // Shorten the range
            while (countS[indices.front().first] >
                   countT[indices.front().first]) {
                countS[indices.front().first] -= 1;
                indices.pop();
            }

            if (compare(countS, countT)) {
                if (i - indices.front().second < end - begin) {
                    begin = indices.front().second;
                    end = i;
                }
            }
        }
    }

    if (begin == -1)
        return "";
    else
        return s.substr(begin, end - begin + 1);
}
static string MinWindow2(const string &s, const string &t) {
    if (s.empty() || t.empty() || s.length() < t.length())
        return "";

    map<char, int> countT;
    for (size_t i = 0; i < t.length(); i++) {
        if (countT.find(t[i]) == countT.end())
            countT[t[i]] = 1;
        else
            countT[t[i]] += 1;
    }

    map<char, int> countS;
    int total = 0;
    queue<pair<char, int>> indices;
    int begin = -1;
    int end = (int)s.length();
    for (int i = 0; i < (int)s.length(); i++) {
        if (countT.find(s[i]) != countT.end()) {
            if (countS.find(s[i]) == countS.end())
                countS[s[i]] = 1;
            else
                countS[s[i]] += 1;

            // TODO: investigate when and how to decrease total and see
            // if can avoid using queue indices.
            if (countS[s[i]] <= countT[s[i]])
                total++;

            indices.push(make_pair(s[i], i));

            while (countS[indices.front().first] >
                   countT[indices.front().first]) {
                countS[indices.front().first] -= 1;
                indices.pop();
            }

            if (total == (int)t.length()) {
                if (i - indices.front().second < end - begin) {
                    begin = indices.front().second;
                    end = i;
                }
            }
        }
    }

    if (begin == -1)
        return "";
    else
        return s.substr(begin, end - begin + 1);
}

// 7. Reverse Integer
// 123 => 321
// -123 => -321
// 120 => 21
// Assume 32-bit int. Return 0 if overflow.
// @numeric
static int reverse(int x) {
    bool negative = false;
    if (x < 0) {
        negative = true;
        x = -x;
    }
    long r = 0;
    while (x > 0) {
        int d = x % 10;
        x = x / 10;
        r = r * 10 + d;
        if ((negative && -r < INT_MIN) || r > INT_MAX)
            return 0;
    }
    return negative ? -r : r;
}

namespace AToI {
// 8. String to Integer (atoi)
// The function first discards as many whitespace characters as necessary until
// the first non-whitespace character is found. Then, takes an optional initial
// plus or minus sign followed by as many numerical digits as possible, and
// convert them as an integer. Any additional characters after those will be
// ignored. If the first sequence of non-whitespace characters in the input is
// not a valid integer, or the input is empty, or the input contains only
// whitespaces, then no conversion is performed, and a zero value is returned.
// If overflow, then INT_MIN (-2147483648) or INT_MAX(2147483647) is returned.
// @numeric
static int solve1(string str) {
    long r = 0;
    bool negative = false;
    bool foundStart = false;
    size_t i = 0;
    while (i < str.length()) {
        char c = str[i++];
        if (c == '+' || c == '-') {
            if (foundStart)
                break;
            foundStart = true;
            negative = (c == '-');
        } else if ('0' <= c && c <= '9') {
            if (!foundStart)
                foundStart = true;
            r = r * 10 + c - '0';
            if (negative && -r <= INT_MIN)
                return INT_MIN;
            else if (!negative && r >= INT_MAX)
                return INT_MAX;
        } else if (c == ' ') {
            if (foundStart)
                break;
        } else
            break;
    }
    return negative ? -r : r;
}
// @numeric
static int solve2(string str) {
    size_t i = 0;
    while (i < str.length() && str[i] == ' ')
        i++;
    if (i == str.length())
        return 0;
    bool negative = false;
    if (str[i] == '+' || str[i] == '-') {
        negative = (str[i++] == '-');
    }
    if (i == str.length() || str[i] < '0' || str[i] > '9')
        return 0;
    long r = 0;
    while (i < str.length() && '0' <= str[i] && str[i] <= '9') {
        r = r * 10 + str[i++] - '0';
        if (negative && -r <= INT_MIN)
            return INT_MIN;
        else if (!negative && r >= INT_MAX)
            return INT_MAX;
    }
    return negative ? -r : r;
}
} // namespace AToI

// Validate if a given string is numeric. Some examples:
// "0" => true
// " 0.1 " => true
// "abc" => false
// "1 a" => false
// "2e10" => true
static bool IsNumber(const char *s) {
    if (s == nullptr || *s == '\0')
        return false;
    while (*s == ' ')
        s++;
    if (*s == '\0')
        return false;
    if (*s != '+' && *s != '-' && *s != '.' && (*s < '0' || *s > '9'))
        return false;
    if ((*s == '+' || *s == '-') && *(s + 1) == '.' &&
        (*(s + 2) == '\0' || *(s + 2) == ' '))
        return false;
    bool foundDot = *s == '.';
    if (foundDot && (*(s + 1) < '0' || *(s + 1) > '9'))
        return false;
    bool foundE = false;
    s++;
    while (*s != '\0' && *s != ' ') {
        switch (*s) {
        case '+':
        case '-':
            if (*(s - 1) != 'e' && *(s - 1) != 'E')
                return false;
            if (*(s + 1) < '0' || *(s + 1) > '9')
                return false;
            break;
        case '.':
            if (foundE || foundDot)
                return false;
            foundDot = true;
            if (*(s + 1) != '\0' && *(s + 1) != ' ' && *(s + 1) != 'e' &&
                *(s + 1) != 'E' && (*(s + 1) < '0' || *(s + 1) > '9'))
                return false;
            break;
        case 'e':
        case 'E':
            if (foundE)
                return false;
            foundE = true;
            if (*(s - 1) != '.' && (*(s - 1) < '0' || *(s - 1) > '9'))
                return false;
            if (*(s + 1) != '+' && *(s + 1) != '-' &&
                (*(s + 1) < '0' || *(s + 1) > '9'))
                return false;
            break;
        default:
            if (*s < '0' || *s > '9')
                return false;
            break;
        }
        s++;
    }
    while (*s == ' ')
        s++;
    if (*s == '\0')
        return true;
    else
        return false;
}

// 71. Simplify Path
// Given an absolute path for a file (Unix-style), simplify it. For example,
// path = "/home/", => "/home"
// path = "/a/./b/../../c/", => "/c"
// Corner Cases: Did you consider the case where path = "/../"? In this case,
// you should return "/". Another corner case is the path might contain
// multiple slashes // '/' together, such as "/home//foo/". In this case,
// you should ignore redundant slashes and return "/home/foo".
// @string, @linear
static string simplifyPath(string path) {
    int len = path.length();
    if (len == 0 || path[0] != '/')
        return path;
    int i = -1;
    int j = 0;
    while (j < len) {
        if (path[j] == '/') {
            while (j < len && path[j] == '/')
                j++;
            if (j == len)
                break; // ////
            if (path[j] == '.') {
                if (j + 1 == len) {
                    break;                       // /.
                } else if (path[j + 1] == '/') { // /./
                    j = j + 1;
                    continue;
                } else if (path[j + 1] == '.') {
                    if (j + 2 == len) { // /..
                        while (i > 0 && path[i] != '/')
                            i--;
                        if (i > 0)
                            i--;
                        break;
                    } else if (path[j + 2] == '/') { //  /../
                        while (i > 0 && path[i] != '/')
                            i--;
                        if (i > 0)
                            i--;
                        j = j + 2;
                        continue;
                    }
                }
            }
            if (i == -1 || path[i] != '/') {
                i++;
                path[i] = '/';
            }
            if (i + 1 < j) {
                while (j < len && path[j] != '/') {
                    i++;
                    path[i] = path[j++];
                }
            } else {
                while (j < len && path[j] != '/')
                    j++;
                i = j - 1;
            }
        } else {
            j++;
        }
    }
    if (i == -1)
        return string("/");
    else
        return path.substr(0, i + 1);
}
static string simplifyPath2(string path) {
    int len = path.length();
    if (len == 0)
        return "";
    vector<string> tokens;
    int i = 0;
    while (i < len) {
        while (i < len && path[i] == '/')
            i++;
        if (i == len)
            break;
        if (path[i] == '.') {
            if (i + 1 == len)
                break;
            if (path[i + 1] == '/') {
                i += 2;
                continue;
            } else if (path[i + 1] == '.') {
                if (i + 2 == len || path[i + 2] == '/') {
                    if (!tokens.empty()) {
                        tokens.pop_back();
                    }
                    i += 3;
                    continue;
                }
            }
        }
        string token;
        int j = i;
        while (j < len && path[j] != '/') {
            token.append(1, path[j]);
            j++;
        }
        tokens.push_back(token);
        i = j;
    }
    string output;
    if (tokens.size() == 0) {
        output.append(1, '/');
    } else {
        for_each(tokens.begin(), tokens.end(), [&](string &t) {
            output.append(1, '/');
            output.append(t.begin(), t.end());
        });
    }
    return output;
}

// 91. Decode Ways
// A message containing letters from A-Z is being encoded to numbers
// using the following mapping:
// 'A' -> 1
// 'B' -> 2
// ...
// 'Z' -> 26
// Given an encoded message containing digits, determine the total
// number of ways to decode it. For example, Given encoded message "12",
// it could be decoded as "AB" (1 2) or "L" (12).
// The number of ways decoding "12" is 2.
// @string, @dynamicprogramming
// Another solution is to compute from the beginning towards the end.
static int numDecodings(string s) {
    if (s.length() == 0)
        return 0;
    int n;
    function<int(int)> solve = [&](int i) -> int {
        if (i == (int)s.length())
            return 0;
        if (i == (int)s.length() - 1) {
            if (s[i] == '0')
                return 0;
            else
                return 1;
        }
        switch (s[i]) {
        case '0':
            return 0;
        case '1':
            if (s[i + 1] == '0') {
                if (s[i + 2] == '0')
                    return 0;
                else
                    return solve(i + 2);
            } else {
                if (s[i + 2] == '0')
                    return solve(i + 1);
                else
                    return solve(i + 1) + solve(i + 2);
            }
        case '2':
            if (s[i + 1] == '0') {
                if (s[i + 2] == '0')
                    return 0;
                else
                    return solve(i + 2);
            } else if ('1' <= s[i + 1] && s[i + 1] <= '6') {
                n = solve(i + 2);
                if (n == 0)
                    n++;
                return solve(i + 1) + n;
            } else {
                return solve(i + 1);
            }
        default:
            return solve(i + 1);
        }
    };
    return solve(0);
}
static int numDecodings2(const string &s) {
    if (s.size() == 0)
        return 0;
    if (s[0] < '1' || s[0] > '9')
        return 0;
    int c0 = 1;
    int c1 = 1;
    int c2;
    for (size_t i = 1; i < s.size(); i++) {
        if (s[i] < '0' && '9' < s[i])
            return 0;
        c2 = 0;
        if ('1' <= s[i] && s[i] <= '9')
            c2 = c1;
        if ((s[i - 1] == '1' && s[i] >= '0' && s[i] <= '9') ||
            (s[i - 1] == '2' && s[i] >= '0' && s[i] <= '6'))
            c2 += c0;
        c0 = c1;
        c1 = c2;
    }
    return c2;
}

// Given a roman numeral, convert it to an integer.
// Input is guaranteed to be within the range from 1 to 3999.
// I can be placed before V and X to make 4 units (IV) and 9 units (IX)
// respectively X can be placed before L and C to make 40 (XL) and 90 (XC)
// respectively C can be placed before D and M to make 400 (CD) and 900 (CM)
// according to the same pattern
static int RomanToInt(const string &s) {
    int n = s.length();
    if (n == 0)
        return 0;
    int i = 0;
    int r = 0;
    while (i < n) {
        switch (s[i]) {
        case 'I': // 1
            if (i + 1 < n && s[i + 1] == 'V') {
                r += 4;
                i += 2;
            } else if (i + 1 < n && s[i + 1] == 'X') {
                r += 9;
                i += 2;
            } else {
                r += 1;
                i++;
            }
            break;
        case 'V': // 5
            r += 5;
            i++;
            break;
        case 'X': // 10
            if (i + 1 < n && s[i + 1] == 'L') {
                r += 40;
                i += 2;
            } else if (i + 1 < n && s[i + 1] == 'C') {
                r += 90;
                i += 2;
            } else {
                r += 10;
                i++;
            }
            break;
        case 'L': // 50
            r += 50;
            i++;
            break;
        case 'C': // 100
            if (i + 1 < n && s[i + 1] == 'D') {
                r += 400;
                i += 2;
            } else if (i + 1 < n && s[i + 1] == 'M') {
                r += 900;
                i += 2;
            } else {
                r += 100;
                i++;
            }
            break;
        case 'D': // 500
            r += 500;
            i++;
            break;
        case 'M': // 1,000
            r += 1000;
            i++;
            break;
        default:
            i++;
            break;
        }
    }
    return r;
}

// Given an integer, convert it to a roman numeral.
// Input is guaranteed to be within the range from 1 to 3999.
static string IntToRomain(int num) {
    string s;
    if (num <= 0)
        return s;
    int d = num / 1000;
    if (d > 0)
        s.append(d, 'M');
    num = num % 1000;
    if (num == 0)
        return s;
    if (num >= 900) {
        s.append(1, 'C');
        s.append(1, 'M');
        num -= 900;
    } else if (num >= 500) {
        s.append(1, 'D');
        num -= 500;
        if (num == 0)
            return s;
        d = num / 100;
        if (d > 0)
            s.append(d, 'C');
        num = num % 100;
    } else if (num >= 400) {
        s.append(1, 'C');
        s.append(1, 'D');
        num -= 400;
    } else {
        d = num / 100;
        if (d > 0)
            s.append(d, 'C');
        num = num % 100;
    }
    // Now 0 <= num < 100
    if (num == 0)
        return s;
    if (num >= 90) {
        s.append(1, 'X');
        s.append(1, 'C');
        num -= 90;
    } else if (num >= 50) {
        s.append(1, 'L');
        num -= 50;
        if (num == 0)
            return s;
        d = num / 10;
        if (d > 0)
            s.append(d, 'X');
        num = num % 10;
    } else if (num >= 40) {
        s.append(1, 'X');
        s.append(1, 'L');
        num -= 40;
    } else {
        d = num / 10;
        if (d > 0)
            s.append(d, 'X');
        num = num % 10;
    }
    // Now 0 <= num < 10
    if (num == 0)
        return s;
    if (num == 9) {
        s.append(1, 'I');
        s.append(1, 'X');
    } else if (num >= 5) {
        s.append(1, 'V');
        num -= 5;
        s.append(num, 'I');
    } else if (num == 4) {
        s.append(1, 'I');
        s.append(1, 'V');
    } else {
        s.append(num, 'I');
    }
    return s;
}

// 93. Restore IP Addresses
// Given a string containing only digits, restore it by returning
// all possible valid IP address combinations.
// For example :
// Given "25525511135",
// return["255.255.11.135", "255.255.111.35"]. (Order does not matter)
// @string, @recurse
static vector<string> restoreIpAddresses(string s) {
    vector<string> result;
    function<void(int, int, string &)> solve = [&](int i, int j, string &p) {
        if (i > 4) {
            if (j == (int)s.length()) {
                p.pop_back();
                result.push_back(p);
            }
            return;
        }
        if (j == (int)s.length())
            return;
        string p1(p);
        solve(i + 1, j + 1, p1.append(1, s[j]).append(1, '.'));
        if (j + 1 == (int)s.length() || s[j] == '0')
            return;
        string p2(p);
        solve(i + 1, j + 2, p2.append(s.substr(j, 2)).append(1, '.'));
        if (j + 2 == (int)s.length())
            return;
        int c = s[j] - '0';
        c = 10 * c + s[j + 1] - '0';
        c = 10 * c + s[j + 2] - '0';
        if (c <= 255) {
            string p3(p);
            solve(i + 1, j + 3, p3.append(s.substr(j, 3)).append(1, '.'));
        }
    };
    string prefix;
    solve(1, 0, prefix);
    return result;
}
static vector<string> restoreIpAddresses2(const string &s) {
    vector<string> ips;
    int len = s.length();
    if (len < 4 || len > 12)
        return ips;

    auto check = [&](const string &octet) -> bool {
        int l = octet.length();
        for (int i = 0; i < min(3, l); i++) {
            if (octet[i] < '0' || octet[i] > '9')
                return false;
        }
        int m = 0;
        for (int i = 0; i < min(3, l); i++) {
            m = 10 * m + octet[i] - '0';
        }
        return 0 <= m && m <= 255;
    };

    for (int i = 1; i <= (s[0] == '0' ? 1 : min(3, len - 3)); i++) {
        for (int j = i + 1; j <= (s[i] == '0' ? i + 1 : min(i + 3, len - 2));
             j++) {
            for (int k = j + 1;
                 k <= (s[j] == '0' ? j + 1 : min(j + 3, len - 1)); k++) {
                if ((len - k > 3) || (len - k > 1 && s[k] == '0'))
                    continue;
                if (check(s.substr(0, i)) && check(s.substr(i, j - i)) &&
                    check(s.substr(j, k - j)) && check(s.substr(k, len - k))) {
                    string ip(s.substr(0, i));
                    ip.append(1, '.');
                    ip.append(s.substr(i, j - i));
                    ip.append(1, '.');
                    ip.append(s.substr(j, k - j));
                    ip.append(1, '.');
                    ip.append(s.substr(k, len - k));
                    ips.push_back(ip);
                }
            }
        }
    }

    return ips;
}

// 165. Compare Version Numbers
// Compare two version numbers version1 and version2. If version1 > version2
// return 1, if version1 < version2 return -1, otherwise return 0. You may
// assume that the version strings are non-empty and contain only digits and the
// . character. The . character does not represent a decimal point and is used
// to separate number sequences. For instance, 2.5 is not "two and a half" or
// "half way to version three", it is the fifth second-level revision of the
// second first-level revision. Here is an example of version numbers ordering:
// 0.1 < 1.1 < 1.2 < 13.37
// Another option is to compare characters directly:
// 0.1 < 1.1 because 0 < 1 at index 0
// 0.3.0 < 0.12.1 because . < 2 at index 3
static int compareVersion(string version1, string version2) {
    function<int(const string &, size_t &)> version = [&](const string &str,
                                                          size_t &i) -> int {
        int val = 0;
        while (i < str.size() && str[i] == '.')
            i++;
        if (i >= str.size())
            return val;
        size_t j = str.find_first_of('.', i);
        if (j == string::npos) {
            val = atoi(str.substr(i).c_str());
            i = str.size();
        } else {
            val = atoi(str.substr(i, j - i).c_str());
            i = j;
        }
        return val;
    };
    size_t i1 = 0;
    size_t i2 = 0;
    int v1;
    int v2;
    while (i1 < version1.size() || i2 < version2.size()) {
        v1 = version(version1, i1);
        v2 = version(version2, i2);
        if (v1 < v2)
            return -1;
        else if (v1 > v2)
            return 1;
    }
    return 0;
}

// Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.
// For example,
// s1 = "aabcc",
// s2 = "dbbca",
// When s3 = "aadbbcbcac", return true.
// When s3 = "aadbbbaccc", return false.
//   j 0 1 2
// i 0
//   1
//   2
// Let M[i][j] indicates whether s3[0..i+j-1] is interleave of s1[0..i-1] and
// s2[0..j-1] M[i][j] =   s1[i-1] == s3[i+j-1] && M[i-1][j]
//          || s2[j-1] == s3[i+j-1] && M[i][j-1]
static bool IsInterLeave(const string &s1, const string &s2, const string &s3) {
    if (s3.length() != s1.length() + s2.length())
        return false;
    if (s3.length() == 0)
        return true;

    vector<bool> match(1 + s2.size(), true);
    for (size_t j = 1; j <= s2.size(); j++) {
        match[j] = match[j - 1] && s2[j - 1] == s3[j - 1];
    }

    for (size_t i = 1; i <= s1.size(); i++) {
        match[0] = match[0] && s1[i - 1] == s3[i - 1];
        for (size_t j = 1; j <= s2.size(); j++) {
            match[j] = (match[j] && s1[i - 1] == s3[i + j - 1]) ||
                       (match[j - 1] && s2[j - 1] == s3[i + j - 1]);
        }
    }

    return match[s2.size()];
}

// 9. Palindrome Number
// Determine whether an integer is a palindrome. Do this without extra space.
static bool isPalindrome(int x) {
    if (x < 0)
        return false;
    long long y = x;
    long long d = 1;
    while (y >= 10 * d) {
        d *= 10;
    }

    int l = 0;
    int r = 0;
    while (y > 0) {
        l = y >= d ? (y / d) : 0; // what if just l = y / d ?
        r = y % 10;
        if (l != r)
            return false;
        y = (y % d) / 10;
        d /= 100;
    }
    return true;
}

// 89. Gray Code
// The gray code is a binary numeral system where two successive values differ
// in only one bit. Given a non-negative integer n representing the total
// number of bits in the code, print the sequence of gray code. A gray code
// sequence must begin with 0. For example, given n = 2, return [0, 1, 3, 2].
// Its gray code sequence is:
// 00 - 0
// 01 - 1
// 11 - 3
// 10 - 2
// Note :
// For a given n, a gray code sequence is not uniquely defined. For example,
// [0, 2, 3, 1] is also a valid gray code sequence according to the above
// definition. For now, the judge is able to judge based on one instance of
// gray code sequence. Sorry about that.
static vector<int> grayCode(int n) {
    vector<int> gray = {0};
    int b = 0x1;
    for (int i = 0; i < n; i++) {
        int m = gray.size();
        for (int j = m - 1; j >= 0; j--) {
            int c = gray[j];
            c |= b;
            gray.push_back(c);
        }
        b = (b << 1);
    }
    return gray;
}
static vector<int> grayCode2(int n) {
    vector<int> codes = {};
    if (n <= 0 || n > 8 * (int)sizeof(int))
        return codes;
    function<void(int &, int)> toggle = [&](int &code, int position) {
        code = code ^ (0x1 << position);
        codes.push_back(code);
        if (position > 0) {
            for (int i = 0; i < position; i++)
                toggle(code, i);
        }
    };

    int code = 0;
    codes.push_back(code);
    for (int i = 0; i < n; i++)
        toggle(code, i);

    return codes;
}

// 168. Excel Sheet Column Title
// Given a positive integer, return its corresponding column title
// as appear in an Excel sheet. For example :
// 1 -> A
// 2 -> B
// 3 -> C
//   ...
// 26 -> Z
// 27 -> AA
// 28 -> AB
static string convertToTitle(int n) {
    string e;
    while (n > 0) {
        int r = n % 26;
        n = (n - r) / 26;
        if (r == 0) {
            r = 26;
            n--;
        }
        e.insert(e.begin(), 'A' + r - 1);
    }
    return e;
}

// 171. Excel Sheet Column Number
// Related to question Excel Sheet Column Title. Given a column title
// as appear in an Excel sheet, return its corresponding column number.
// For example :
// A -> 1
// B -> 2
// C -> 3
//   ...
// Z -> 26
// AA -> 27
// AB -> 28
static int titleToNumber(string s) {
    int n = 0;
    for (size_t i = 0; i < s.length(); i++) {
        n *= 26;
        n += (s[i] - 'A' + 1);
    }
    return n;
}

// 67. Add Binary
// Given two binary strings, return their sum (also a binary string).
// For example,
// a = "11"
// b = "1"
// Return "100"
static string addBinary(string a, string b) {
    string result;
    int i = a.length() - 1;
    int j = b.length() - 1;
    int c = 0;
    int d = 0;
    while (i >= 0 || j >= 0) {
        if (i >= 0 && j >= 0) {
            d = c + (a[i--] - '0') + (b[j--] - '0');
        } else if (i >= 0) {
            d = c + (a[i--] - '0');
        } else {
            d = c + (b[j--] - '0');
        }
        if (d == 2 || d == 3)
            c = 1;
        else
            c = 0;
        d %= 2;
        result.insert(result.begin(), 1, d + '0');
    }
    if (c == 1) {
        result.insert(result.begin(), 1, c + '0');
    }
    return result;
}

// 43. Multiply Strings
// Given two non-negative integers num1 and num2 represented as strings, return
// the product of num1 and num2. Note: The length of both num1 and num2 is <
// 110. Both num1 and num2 contains only digits 0 - 9. Both num1 and num2 does
// not contain any leading zero. You must not use any built-in BigInteger
// library or convert the inputs to integer directly.
// @string
static string multiply(string num1, string num2) {
    if (num1.length() == 1 && num1[0] == '0')
        return string("0");
    if (num2.length() == 1 && num2[0] == '0')
        return string("0");
    function<int(char)> toDigit = [&](char c) { return c - '0'; };
    function<char(int)> toChar = [&](int i) { return i + '0'; };
    function<string(string, char)> multiplyDigit = [&](string str, char ch) {
        string result;
        int i = str.length() - 1;
        int c = 0;
        int m;
        while (0 <= i) {
            m = c + toDigit(str[i--]) * toDigit(ch);
            c = m / 10;
            result.insert(result.begin(), toChar(m % 10));
        }
        if (c > 0)
            result.insert(result.begin(), toChar(c));
        return result;
    };
    function<string(string, string)> sum = [&](string str1, string str2) {
        string result;
        int i = str1.length() - 1;
        int j = str2.length() - 1;
        int c = 0;
        int m;
        while (0 <= i || 0 <= j) {
            if (0 <= i && 0 <= j)
                m = toDigit(str1[i--]) + toDigit(str2[j--]);
            else if (0 <= i)
                m = toDigit(str1[i--]);
            else
                m = toDigit(str2[j--]);
            m += c;
            c = m / 10;
            result.insert(result.begin(), toChar(m % 10));
        }
        if (c > 0)
            result.insert(result.begin(), toChar(c));
        return result;
    };
    string result = "0";
    char c;
    int i = num2.length() - 1;
    while (0 <= i) {
        c = num2[i--];
        if (c != '0')
            result = sum(result, multiplyDigit(num1, c));
        num1.append(1, '0');
    }
    return result;
}

// 29. Divide Two Integers
// Divide two integers without using multiplication, division and mod operator.
// If it is overflow, return MAX_INT.
static int divide(int dividend, int divisor) {
    if (divisor == 0 || (dividend == INT_MIN && divisor == -1))
        return INT_MAX;
    bool negative = false;
    // use long in case of overflow when fliping the sign
    long longDividend = (long)dividend;
    long longDivisor = (long)divisor;
    if (longDividend < 0) {
        longDividend = -longDividend;
        if (longDivisor < 0)
            longDivisor = -longDivisor;
        else
            negative = true;
    } else if (longDivisor < 0) {
        longDivisor = -longDivisor;
        negative = true;
    }
    int quotient = 0;
    // use long in case of overflow when left shift by 1
    long d = longDivisor;
    int m = 1;
    while (longDividend >= longDivisor) {
        if (d <= longDividend && longDividend < d << 1) {
            quotient += m;
            longDividend -= d;
        } else if (longDividend < d) {
            d = d >> 1;
            m = m >> 1;
        } else { // d << 1 <= longDividend
            d = d << 1;
            m = m << 1;
        }
    }
    return negative ? -quotient : quotient;
}
static int divide2(int dividend, int divisor) {
    if (divisor == 0)
        throw invalid_argument("divided by zero");
    if (dividend == 0)
        return 0;
    if (divisor == 1)
        return dividend;
    if (divisor == -1)
        return -dividend;

    long long de = dividend;
    long long ds = divisor;

    bool negative = false;
    if (de > 0 && ds < 0) {
        negative = true;
        ds = -ds;
    } else if (de < 0 && ds > 0) {
        negative = true;
        de = -de;
    } else if (de < 0 && ds < 0) {
        de = -de;
        ds = -ds;
    }

    long long r = 0;
    while (de >= ds) {
        long long d = ds;
        long long i = 1;
        while (de >= d) {
            d = d << 1;
            i = i << 1;
        }
        d = d >> 1;
        i = i >> 1;
        de -= d;
        r += i;
    }

    if (negative)
        r = -r;
    return (int)r;
}
static int divide3(int dividend, int divisor) {
    if (divisor == 0)
        throw invalid_argument("divided by zero");
    if (dividend == 0)
        return 0;

    long long de = dividend;
    long long ds = divisor;

    bool negative = false;
    if (de > 0 && ds < 0) {
        negative = true;
        ds = -ds;
    } else if (de < 0 && ds > 0) {
        negative = true;
        de = -de;
    } else if (de < 0 && ds < 0) {
        de = -de;
        ds = -ds;
    }

    if (de < ds)
        return 0;
    if (de == ds)
        return negative ? -1 : 1;

    long long r = 0;
    long long d = ds;
    long long i = 1;
    vector<long long> v(1, d);
    while (de >= d) {
        d = d << 1;
        i = i << 1;
        v.push_back(d);
    }
    d = d >> 1;
    i = i >> 1;
    de -= d;
    v.pop_back();
    r += i;

    while (de >= ds) {
        int j = 0;
        int k = v.size() - 1;
        while (j <= k) {
            int m = j + ((k - j) >> 1);
            if (de < v[m]) {
                if (j == m) {
                    if (m > 0) {
                        r += (long long)(1 << (m - 1));
                        de -= v[m - 1];
                    }
                    while ((int)v.size() > m)
                        v.pop_back();
                    break;
                }
                k = m - 1;
            } else if (v[m] < de) {
                if (m == k) {
                    r += (long long)(1 << m);
                    de -= v[m];
                    while ((int)v.size() > m + 1)
                        v.pop_back();
                    break;
                }
                j = m + 1;
            } else {
                r += (long long)(1 << m);
                de -= v[m];
                break;
            }
        }
    }

    if (negative)
        r = -r;
    return (int)r;
}

// 50. Pow(x, n)
static double myPow(double x, int n) {
    // Use long long to avoid overflow when flip the sign.
    long long n1 = n;
    bool inverse = false;
    if (n1 < 0) {
        inverse = true;
        n1 = -n1;
    }
    // Use long long to avoid overflow when left-shift the bits.
    long long d;
    double y;
    double z = 1;
    while (n1 > 0) {
        d = 1;
        y = x; // = x^d
        // loop x^2, x^4, x^8, ...
        while ((d << 1) <= n1) {
            y *= y;
            d = d << 1;
        }
        z *= y;
        n1 -= d;
    }
    return inverse ? 1 / z : z;
}
// Keep dividing n by 2 and get the remainder r (0 or 1)
// then there is a sequence:
// n n_1 n_2 n_3 n_4 ...... n_k (= 0)
//   r_1 r_2 r_3 r_4 ...... r_k (= 0)
// x^n = x^{r_1} * (x^2)^{n_1}
//     = x^{r_1} * (x^2)^{r_2} * (x^4)^{n_2}
//     = x^{r_1} * (x^2)^{r_2} * (x^4)^{r_3} * (x^8)^{n_3}
//     = x^{r_1} * (x^2)^{r_2} * (x^4)^{r_3} * (x^8)^{r_4} * (x^16)^{n_4}
//     ......
//     = x^{r_1} * (x^2)^{r_2} * (x^4)^{r_3} * (x^8)^{r_4} * (x^16)^{n_4} ......
//     * (x^{2^(k-1)})^{r_(k-1)} * (x^{2^k})^{n_k}
static double myPow2(double x, int n) {
    if (x == 0)
        return 0;
    if (n == 0)
        return 1;
    bool negative = n < 0;
    if (negative)
        n = -n;
    double m = x;
    double p = (n & 0x1) == 1 ? x : 1;
    n = n >> 1;
    while (n > 0) {
        m = m * m;
        if ((n & 0x1) == 1) {
            p = p * m;
        }
        n = n >> 1;
    }
    if (negative)
        p = 1 / p;
    return p;
}
static double myPow3(double x, int n) {
    if (x == 0)
        return 0;
    if (n == 0)
        return 1;
    bool negative = n < 0;
    if (negative)
        n = -n;
    double m = x;
    double p = 1;
    while (n > 0) {
        if ((n & 0x1) == 1) {
            p = p * m;
        }
        m = m * m;
        n = n >> 1;
    }
    if (negative)
        p = 1 / p;
    return p;
}
static double myPow4(double x, int n) {
    if (x == 0)
        return 0;
    if (n == 0)
        return 1;
    bool negative = n < 0;
    if (negative)
        n = -n;
    double p = (n & 0x1) == 1 ? x : 1;
    p = p * myPow4(x * x, n >> 1);
    if (negative)
        p = 1 / p;
    return p;
}

// 69. Sqrt(x)
// Implement int sqrt(int x). Compute and return the square root of x.
static int mySqrt(int x) {
    long long l = 0;
    long long r = x;
    // Use long long to avoid overflow of m * m.
    long long m;
    while (l <= r) {
        m = l + ((r - l) >> 1);
        long long low = m * m;
        long long high = (m + 1) * (m + 1);
        if (low <= x && x < high) {
            break;
        } else if (x < low) {
            r = m - 1;
        } else {
            l = m + 1;
        }
    }
    return (int)m;
}
static int mySqrt2(int x) {
    if (x < 0)
        throw invalid_argument("x cannot be negative");
    if (x < 2)
        return x;
    long long l = 1;
    long long h = (x >> 1) + 1;
    while (l <= h) {
        long long m = l + ((h - l) >> 1);
        long long s = m * m;
        if (x == s)
            return (int)m;
        else if (x < s) {
            if (l == m)
                break;
            h = m;
        } else {
            if (l == m) {
                s = h * h;
                if (x == s)
                    return (int)h;
                return (int)m;
            } else {
                l = m;
            }
        }
    }
    throw runtime_error("sqrt(x) cannot be found");
}

// 172. Factorial Trailing Zeroes
// Given an integer n, return the number of trailing zeroes in n!.
// Note: Your solution should be in logarithmic time complexity.
static int trailingZeroes(int n) {
    // n! = 1 * 2 * 3 * 4 * 5 * ... * 10 * ... * 15 * ... * n
    //    = 2^x * 5^y * z
    // Usually x >= y. So just need to count occurrence of 5.
    //   n:      1, 2, 3, 4, 5, 6, ..., 2*5, ..., 3*5, ..., n1*5, ..., n
    // n/5 = n1:             1,    ..., 2,   ..., 3,   ..., n2*5, ..., n1
    // n1/5 = n2:                                   1, ..., n3*5, ..., n2
    // n2/5 = n3: ...
    // ...
    int c = 0;
    while (n >= 5) {
        n /= 5;
        c += n;
    }
    return c;
}

// 179. Largest Number
// Given a list of non negative integers, arrange them such that they form the
// largest number. For example, given [3, 30, 34, 5, 9], the largest formed
// number is 9534330. Note: The result may be very large, so you need to return
// a string instead of an integer.
static string largestNumber(vector<int> &nums) {
    vector<string> strs;
    strs.resize(nums.size());
    transform(nums.begin(), nums.end(), strs.begin(), [&](int i) {
        ostringstream oss;
        oss << i;
        return oss.str();
    });
    sort(strs.begin(), strs.end(), [&](const string &str1, const string &str2) {
        string str12(str1);
        str12.append(str2);
        string str21(str2);
        str21.append(str1);
        return str12.compare(str21) > 0;
    });
    string result;
    if (strs[0] == "0") {
        result = "0";
    } else {
        for_each(strs.begin(), strs.end(),
                 [&](const string &str) { result.append(str); });
    }
    return result;
}

// 190. Reverse Bits
// Reverse bits of a given 32 bits unsigned integer. For example, given input
// 43261596 (represented in binary as 00000010100101000001111010011100), return
// 964176192 (represented in binary as 00111001011110000010100101000000). Follow
// up: If this function is called many times, how would you optimize it?
static uint32_t reverseBits(uint32_t n) {
    // b31 b30 b29 ... b18 b17 b16 b15 b14 b13 ... b2  b1  b0
    // reverse higher 16 bits and lower 16 bits
    // b16 b17 b18 ... b29 b30 b31 b0  b1  b2  ... b13 b14 b15
    // exchange higher 16 bits and lower 16 bits
    // b0  b1  b2  ... b13 b14 b15 b16 b17 b18 ... b29 b30 b31
    // reverse(n) = exchange(reverse(higher_half(n)), reverse(lower_half(n)))
    n = (n & 0x55555555) << 1 | (n & 0xaaaaaaaa) >> 1;
    n = (n & 0x33333333) << 2 | (n & 0xcccccccc) >> 2;
    n = (n & 0x0f0f0f0f) << 4 | (n & 0xf0f0f0f0) >> 4;
    n = (n & 0x00ff00ff) << 8 | (n & 0xff00ff00) >> 8;
    n = (n & 0x0000ffff) << 16 | (n & 0xffff0000) >> 16;
    return n;
}

// 191. Number of 1 Bits
// Write a function that takes an unsigned integer and returns the number of
// â€™1' bits it has (also known as the Hamming weight). For example, the 32-bit
// integer â€™11' has binary representation 00000000000000000000000000001011, so
// the function should return 3.
static int hammingWeight(uint32_t n) {
    int h = 0;
    while (n != 0) {
        n &= (n - 1);
        h++;
    }
    return h;
}

// 201. Bitwise AND of Numbers Range
// Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND
// of all numbers in this range, inclusive. For example, given the range [5, 7],
// you should return 4.
static int rangeBitwiseAnd(int m, int n) {
    int x = 0;
    while (m != n) {
        m >>= 1;
        n >>= 1;
        x++;
    }
    return m << x;
}

// 202. Happy Number
// Write an algorithm to determine if a number is "happy". A happy number is a
// number defined by the following process: Starting with any positive integer,
// replace the number by the sum of the squares of its digits, and repeat the
// process until the number equals 1 (where it will stay), or it loops endlessly
// in a cycle which does not include 1. Those numbers for which this process
// ends in 1 are happy numbers. Example: 19 is a happy number
//  1^2 + 9^2 = 82
//  8^2 + 2^2 = 68
//  6^2 + 8^2 = 100
//  1^2 + 0^2 + 0^2 = 1
static bool isHappy(int n) {
    int x = n;
    cout << n;
    do {
        int y = 0;
        while (x > 0) {
            int r = x % 10;
            y += (r * r);
            x /= 10;
        }
        x = y;
        cout << ", " << x;
    } while (x != n && x != 1);
    return x == 1;
}

// 54. Spiral Matrix
// Given a matrix of m x n elements (m rows, n columns), return all
// elements of the matrix in spiral order. For example,
// Given the following matrix :
// [
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 8, 9]
// ]
// You should return [1, 2, 3, 6, 9, 8, 7, 4, 5].
static vector<int> spiralOrder(vector<vector<int>> &matrix) {
    vector<int> result = vector<int>{};
    if (matrix.empty() || matrix[0].empty())
        return result;
    int h = matrix[0].size();
    int v = matrix.size();
    int i = 0;
    int j = -1;
    int k;
    while (h > 0 && v > 0) {
        for (k = j + 1; k <= j + h; k++)
            result.push_back(matrix[i][k]);
        v--;
        j = k - 1;
        if (v == 0)
            break;
        for (k = i + 1; k <= i + v; k++)
            result.push_back(matrix[k][j]);
        h--;
        i = k - 1;
        if (h == 0)
            break;
        for (k = j - 1; k >= j - h; k--)
            result.push_back(matrix[i][k]);
        v--;
        j = k + 1;
        if (v == 0)
            break;
        for (k = i - 1; k >= i - v; k--)
            result.push_back(matrix[k][j]);
        h--;
        i = k + 1;
        if (h == 0)
            break;
    }
    return result;
}
static vector<int> spiralOrder2(vector<vector<int>> &matrix) {
    vector<int> result = vector<int>{};
    if (matrix.empty() || matrix[0].empty())
        return result;
    function<void(int, int, int, int)> solve = [&](int i, int j, int m, int n) {
        for (int k = 0; k < n; k++)
            result.push_back(matrix[i][j + k]);
        if (m == 1)
            return;
        for (int k = 1; k < m; k++)
            result.push_back(matrix[i + k][j + n - 1]);
        if (n == 1)
            return;
        for (int k = 1; k < n; k++)
            result.push_back(matrix[i + m - 1][j + n - 1 - k]);
        for (int k = 1; k < m - 1; k++)
            result.push_back(matrix[i + m - 1 - k][j]);
    };
    int m = matrix.size();
    int n = matrix[0].size();
    int i = 0;
    int j = 0;
    while (m > 0 && n > 0) {
        solve(i, j, m, n);
        i++;
        j++;
        m -= 2;
        n -= 2;
    }
    return result;
}

// 59. Spiral Matrix II
// Given an integer n, generate a square matrix filled with elements
// from 1 to n^2 in spiral order.
// For example,
// Given n = 3,
// You should return the following matrix :
// [
//   [1, 2, 3],
//   [8, 9, 4],
//   [7, 6, 5]
// ]
// @grid
static vector<vector<int>> generateMatrix(int n) {
    if (n <= 0)
        return vector<vector<int>>{};
    vector<vector<int>> matrix(n, vector<int>(n, 0));
    int h = n; // horizontal steps
    int v = n; // vertical steps
    int i = 0;
    int j = -1;
    int e = 1; // element value
    int k;
    while (h >= 0 || v >= 0) {
        for (k = j + 1; k <= j + h; k++) {
            matrix[i][k] = e++;
        }
        v--;
        j = k - 1;
        if (v == 0)
            break;
        for (k = i + 1; k <= i + v; k++) {
            matrix[k][j] = e++;
        }
        h--;
        i = k - 1;
        if (h == 0)
            break;
        for (k = j - 1; k >= j - h; k--) {
            matrix[i][k] = e++;
        }
        v--;
        j = k + 1;
        if (v == 0)
            break;
        for (k = i - 1; k >= i - v; k--) {
            matrix[k][j] = e++;
        }
        h--;
        i = k + 1;
        if (h == 0)
            break;
    }
    return matrix;
}
static vector<vector<int>> generateMatrix2(int n) {
    if (n == 0)
        return vector<vector<int>>();
    if (n < 0)
        n = -n;
    vector<vector<int>> o(n, vector<int>(n, 0));
    int h = n;
    int v = n;
    int i = 0;
    int j = -1;
    int t = 1;
    int d = 0;
    while (h > 0 && v > 0) {
        d = d % 4;
        switch (d) {
        case 0:
            for (int k = 1; k <= h; k++) {
                j++;
                o[i][j] = t++;
            }
            v--;
            d++;
            break;
        case 1:
            for (int k = 1; k <= v; k++) {
                i++;
                o[i][j] = t++;
            }
            h--;
            d++;
            break;
        case 2:
            for (int k = 1; k <= h; k++) {
                j--;
                o[i][j] = t++;
            }
            v--;
            d++;
            break;
        default:
            for (int k = 1; k <= v; k++) {
                i--;
                o[i][j] = t++;
            }
            h--;
            d++;
            break;
        }
    }
    return o;
}

// 62. Unique Paths
// A robot is located at the top-left corner of a m x n grid (marked 'Start'
// in the diagram below). The robot can only move either down or right at any
// point in time. The robot is trying to reach the bottom-right corner of the
// grid (marked 'Finish' in the diagram below). How many possible unique paths
// are there? Note: m and n will be at most 100.
// @grid, @dynamicprogramming
static int uniquePaths(int m, int n) {
    if (m <= 0 || n <= 0)
        return 0;
    vector<vector<int>> grid(m, vector<int>(n, 0));
    for (int j = n - 1; j >= 0; j--) {
        grid[m - 1][j] = 1;
    }
    for (int i = m - 2; i >= 0; i--) {
        grid[i][n - 1] = 1;
        for (int j = n - 2; j >= 0; j--) {
            grid[i][j] = grid[i + 1][j] + grid[i][j + 1];
        }
    }
    return grid[0][0];
}
// sum[i][j] = sum[i+1][j] + sum[i][j+1]
static int uniquePaths2(int m, int n) {
    if (m <= 0 || n <= 0)
        return 0;
    vector<int> sum(n, 1);
    for (int i = m - 2; i >= 0; i--) {
        for (int j = n - 2; j >= 0; j--) {
            sum[j] += sum[j + 1];
        }
    }
    return sum[0];
}

// 63. Unique Paths II
// Follow up for "Unique Paths": Now consider if some obstacles are added to
// the grids. How many unique paths would there be? An obstacle and empty space
// is marked as 1 and 0 respectively in the grid. For example, There is one
// obstacle in the middle of a 3x3 grid as illustrated below.
// [
//   [0, 0, 0],
//   [0, 1, 0],
//   [0, 0, 0]
// ]
// The total number of unique paths is 2.
// Note: m and n will be at most 100.
// Can solve by using one array.
static int uniquePathsWithObstacles(vector<vector<int>> &obstacleGrid) {
    int m = obstacleGrid.size();
    int n = obstacleGrid[0].size();
    if (m == 0 || n == 0)
        return 0;
    vector<vector<int>> grid(obstacleGrid);
    grid[m - 1][n - 1] = (obstacleGrid[m - 1][n - 1] == 0) ? 1 : 0;
    for (int j = n - 2; j >= 0; j--) {
        grid[m - 1][j] = (obstacleGrid[m - 1][j] == 0) ? grid[m - 1][j + 1] : 0;
    }
    for (int i = m - 2; i >= 0; i--) {
        grid[i][n - 1] = (obstacleGrid[i][n - 1] == 0) ? grid[i + 1][n - 1] : 0;
        for (int j = n - 2; j >= 0; j--) {
            grid[i][j] = (obstacleGrid[i][j] == 0)
                             ? (grid[i + 1][j] + grid[i][j + 1])
                             : 0;
        }
    }
    return grid[0][0];
}
static int uniquePathsWithObstacles2(vector<vector<int>> &obstacleGrid) {
    int m = obstacleGrid.size();
    if (m == 0)
        return 0;
    int n = obstacleGrid[0].size();
    if (n == 0)
        return 0;
    if (obstacleGrid[m - 1][n - 1] == 1)
        return 0;
    vector<int> sum(n, 0);
    sum[n - 1] = 1;
    for (int j = n - 2; j >= 0; j--) {
        sum[j] = obstacleGrid[m - 1][j] == 1 ? 0 : sum[j + 1];
    }
    for (int i = m - 2; i >= 0; i--) {
        sum[n - 1] = obstacleGrid[i][n - 1] == 1 ? 0 : sum[n - 1];
        for (int j = n - 2; j >= 0; j--) {
            sum[j] = obstacleGrid[i][j] == 1 ? 0 : (sum[j] + sum[j + 1]);
        }
    }
    return sum[0];
}

// 64. Minimum Path Sum
// Given a m x n grid filled with non-negative numbers, find a path from top
// left to bottom right which minimizes the sum of all numbers along its path.
// Note: You can only move either down or right at any point in time.
// Note: Greedy search does not work here. e.g.,
// [[1, 3,   0]
//  [2, 100, 0]
//  [1, 1,   1]]
// @grid, @dynamicprogramming
static int minPathSum(vector<vector<int>> &grid) {
    if (grid.size() == 0 || grid[0].size() == 0)
        return 0;
    size_t m = grid.size();
    size_t n = grid[0].size();
    vector<vector<int>> sum(grid);
    for (size_t j = 1; j < n; j++) {
        sum[0][j] += sum[0][j - 1];
    }
    for (size_t i = 1; i < m; i++) {
        sum[i][0] += sum[i - 1][0];
        for (size_t j = 1; j < n; j++) {
            sum[i][j] += min(sum[i][j - 1], sum[i - 1][j]);
        }
    }
    return sum[m - 1][n - 1];
}
static int minPathSum2(vector<vector<int>> &grid) {
    if (grid.size() == 0 && grid[0].size() == 0)
        return 0;
    vector<int> sum(grid[0].size(), 0);
    sum[0] = grid[0][0];
    int i = 0;
    int j = 0;
    for (j = 1; j < (int)grid[0].size(); j++) {
        sum[j] = sum[j - 1] + grid[0][j];
    }
    for (i = 1; i < (int)grid.size(); i++) {
        sum[0] = sum[0] + grid[i][0];
        for (j = 1; j < (int)grid[i].size(); j++) {
            sum[j] = grid[i][j] + min(sum[j - 1], sum[j]);
        }
    }
    return sum[j - 1];
}

// 74. Search a 2D Matrix
// Write an efficient algorithm that searches for a value in an m x n matrix.
// This matrix has the following properties: Integers in each row are sorted
// from left to right. The first integer of each row is greater than the last
// integer of the previous row. For example, Consider the following matrix:
// [
//   [1, 3, 5, 7],
//   [10, 11, 16, 20],
//   [23, 30, 34, 50]
// ]
// Given target = 3, return true.
// @grid, @linear
static bool searchMatrix(vector<vector<int>> &matrix, int target) {
    if (matrix.size() == 0 || matrix[0].size() == 0)
        return false;
    int m = matrix.size();
    int n = matrix[0].size();
    int i = 0;
    int j = n - 1;
    while (i < m && j >= 0) {
        if (matrix[i][j] == target)
            return true;
        else if (matrix[i][j] < target) {
            i++;
        } else {
            j--;
        }
    }
    return false;
}
static bool searchMatrix2(vector<vector<int>> &matrix, int target) {
    if (matrix.size() == 0 || matrix[0].size() == 0)
        return false;

    int l = 0;
    int h = matrix.size() - 1;
    int m;
    while (l <= h) {
        m = l + ((h - l) >> 1);
        if (target == matrix[m][0])
            return true;
        if (target < matrix[m][0]) {
            if (l == m)
                return false;
            h = m - 1;
        } else {
            if (l == m) {
                if (target >= matrix[h][0])
                    m = h;
                break;
            }

            l = m;
        }
    }

    l = 0;
    h = matrix[m].size() - 1;
    int n;
    while (l <= h) {
        n = l + ((h - l) >> 1);
        if (target == matrix[m][n])
            return true;
        if (target < matrix[m][n]) {
            if (l == n)
                break;
            h = n - 1;
        } else {
            if (n == h)
                break;
            l = n + 1;
        }
    }

    return false;
}

// 79. Word Search
// Given a 2D board and a word, find if the word exists in the grid. The word
// can be constructed from letters of sequentially adjacent cell, where
// "adjacent" cells are those horizontally or vertically neighboring. The same
// letter cell may not be used more than once. For example, Given board =
// [
//   ['A', 'B', 'C', 'E'],
//   ['S', 'F', 'C', 'S'],
//   ['A', 'D', 'E', 'E']
// ]
// word = "ABCCED", ->returns true,
// word = "SEE", ->returns true,
// word = "ABCB", ->returns false.
// @grid, @dfs
// [TODO] What if a letter can be reused?
static bool exist(vector<vector<char>> &board, string word) {
    if (board.size() == 0 || board[0].size() == 0)
        return false;
    int m = board.size();
    int n = board[0].size();
    int l = word.size();
    function<bool(pair<int, int> &, int, set<pair<int, int>> &)> search =
        [&](pair<int, int> &p, int i, set<pair<int, int>> &v) -> bool {
        if (p.first < 0 || p.first >= m || p.second < 0 || p.second >= n ||
            i < 0 || i >= l || board[p.first][p.second] != word[i] ||
            v.find(p) != v.end()) {
            return false;
        }
        if (i == l - 1)
            return true;
        v.insert(p);
        pair<int, int> p1 = make_pair(p.first, p.second - 1);
        if (search(p1, i + 1, v)) {
            return true;
        }
        p1 = make_pair(p.first, p.second + 1);
        if (search(p1, i + 1, v)) {
            return true;
        }
        p1 = make_pair(p.first - 1, p.second);
        if (search(p1, i + 1, v)) {
            return true;
        }
        p1 = make_pair(p.first + 1, p.second);
        if (search(p1, i + 1, v)) {
            return true;
        }
        v.erase(p);
        return false;
    };
    for (int j = 0; j < m; j++) {
        for (int k = 0; k < n; k++) {
            pair<int, int> point = make_pair(j, k);
            set<pair<int, int>> visited = set<pair<int, int>>{};
            if (search(point, 0, visited))
                return true;
        }
    }
    return false;
}

// 48. Rotate Image
// You are given an n x n 2D matrix representing an image. Rotate the image by
// 90 degrees(clockwise).
// 0 1        3 0
// 3 2        2 1
static void rotate(vector<vector<int>> &matrix) {
    int d = matrix.size();
    // Swap up-left with bottom-right
    for (int i = 0; i < d - 1; i++) {
        for (int j = 0; j < d - i - 1; j++) {
            swap(matrix[i][j], matrix[d - j - 1][d - i - 1]);
        }
    }
    // Swap up with bottom
    for (int i = 0; i < (d >> 1); i++) {
        for (int j = 0; j < d; j++) {
            swap(matrix[i][j], matrix[d - i - 1][j]);
        }
    }
}
static void rotate2(vector<vector<int>> &matrix) {
    int n = matrix.size();
    // Swap up-right with bottom-left
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int t = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = t;
        }
    }
    // Swap left with right
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n / 2; j++) {
            int t = matrix[i][j];
            matrix[i][j] = matrix[i][n - 1 - j];
            matrix[i][n - 1 - j] = t;
        }
    }
}

// 73. Set Matrix Zeroes
// Given a m x n matrix, if an element is 0, set its entire row and column to 0.
// Do it in place.
static void setZeroes(vector<vector<int>> &matrix) {
    if (matrix.size() == 0 || matrix[0].size() == 0)
        return;
    size_t m = matrix.size();
    size_t n = matrix[0].size();
    bool zeroFirstColumn = false;
    bool zeroFirstRow = false;
    for (size_t i = 0; i < m; i++) {
        for (size_t j = 0; j < n; j++) {
            if (matrix[i][j] == 0) {
                if (i == 0)
                    zeroFirstRow = true;
                if (j == 0)
                    zeroFirstColumn = true;
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }
    for (size_t i = 1; i < m; i++) {
        if (matrix[i][0] == 0) {
            for (size_t j = 1; j < n; j++) {
                matrix[i][j] = 0;
            }
        }
    }
    for (size_t j = 1; j < n; j++) {
        if (matrix[0][j] == 0) {
            for (size_t i = 1; i < m; i++) {
                matrix[i][j] = 0;
            }
        }
    }
    if (zeroFirstColumn) {
        for (size_t i = 1; i < m; i++) {
            matrix[i][0] = 0;
        }
    }
    if (zeroFirstRow) {
        for (size_t j = 1; j < n; j++) {
            matrix[0][j] = 0;
        }
    }
}

// 130. Surrounded Regions
// Given a 2D board containing 'X' and 'O' (the letter O), capture all regions
// surrounded by 'X'. A region is captured by flipping all 'O's into 'X's in
// that surrounded region. For example,
//    X X X X
//    X O O X
//    X X O X
//    X O X X
// After running your function, the board should be :
//    X X X X
//    X X X X
//    X X X X
//    X O X X
static void solve(vector<vector<char>> &board) {
    size_t m = board.size();
    if (m == 0)
        return;
    size_t n = board[0].size();
    if (n == 0)
        return;
    function<void(size_t, size_t)> mark = [&](size_t x, size_t y) {
        if (board[x][y] != 'O')
            return;
        board[x][y] = 'Y';
        if (0 < x)
            mark(x - 1, y);
        if (y < n - 1)
            mark(x, y + 1);
        if (x < m - 1)
            mark(x + 1, y);
        if (0 < y)
            mark(x, y - 1);
    };
    for (size_t i = 0; i < n; i++) {
        if (board[0][i] == 'O')
            mark(0, i);
        if (m > 1 && board[m - 1][i] == 'O')
            mark(m - 1, i);
    }
    for (size_t i = 0; i < m; i++) {
        if (board[i][0] == 'O')
            mark(i, 0);
        if (n > 1 && board[i][n - 1] == 'O')
            mark(i, n - 1);
    }
    for (size_t i = 0; i < m; i++) {
        for (size_t j = 0; j < n; j++) {
            if (board[i][j] == 'O') {
                board[i][j] = 'X';
            } else if (board[i][j] == 'Y') {
                board[i][j] = 'O';
            }
        }
    }
}

// 200. Number of Islands
// Given a 2d grid map of '1's (land) and '0's (water), count the number of
// islands. An island is surrounded by water and is formed by connecting
// adjacent lands horizontally or vertically. You may assume all four edges of
// the grid are all surrounded by water. Example 1:
//  11110
//  11010
//  11000
//  00000
// Answer: 1
// Example 2:
//  11000
//  11000
//  00100
//  00011
// Answer: 3
static int numIslands(vector<vector<char>> &grid) {
    int m = grid.size();
    if (m == 0)
        return 0;
    int n = grid[0].size();
    if (n == 0)
        return 0;
    function<void(int, int)> visit = [&](int i, int j) {
        if (grid[i][j] == '1') {
            grid[i][j] = '2';
            if (i > 0)
                visit(i - 1, j);
            if (j < n - 1)
                visit(i, j + 1);
            if (i < m - 1)
                visit(i + 1, j);
            if (j > 0)
                visit(i, j - 1);
        }
    };
    int c = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == '1') {
                c++;
                visit(i, j);
            }
        }
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] != '0') {
                grid[i][j] = '1';
            }
        }
    }
    return c;
}

// Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle
// containing all ones and return its area.
static int MaximalRectangle(vector<vector<char>> &matrix) {
    if (matrix.size() == 0 || matrix[0].size() == 0)
        return 0;
    bool foundOne = false;
    int imin = -1;
    int imax = -1;
    int jmin = -1;
    int jmax = -1;
    for (int i = 0; i < (int)matrix.size(); i++) {
        for (int j = 0; j < (int)matrix[i].size(); j++) {
            if (matrix[i][j] == 1) {
                if (foundOne) {
                    if (i < imin)
                        imin = i;
                    if (i > imax)
                        imax = i;
                    if (j < jmin)
                        jmin = j;
                    if (j > jmax)
                        jmax = j;
                } else {
                    imin = i;
                    imax = i;
                    jmin = j;
                    jmax = j;
                    foundOne = true;
                }
            }
        }
    }

    if (!foundOne)
        return 0;

    int area = (imax - imin + 1) * (jmax - jmin + 1);
    return area;
}

// Given a 2D binary matrix filled with 0's and 1's,
// find the largest rectangle full of ones and with a give point on its top-left
// corner, return the rectangle area.
static int MaximalRectangleAtPoint(vector<vector<char>> &matrix, int pi,
                                   int pj) {
    if (matrix.size() == 0 || matrix[0].size() == 0)
        return 0;
    if (pi < 0 || pi >= (int)matrix.size() || pj < 0 ||
        pj >= (int)matrix[0].size())
        return 0;
    if (matrix[pi][pj] != 1)
        return 0;

    int i = pi;
    int j = pj;

    while (j + 1 < (int)matrix[0].size() && matrix[i][j + 1] == 1)
        j++;

    int maxj = j;
    int maxArea = j - pj + 1;

    while (i + 1 < (int)matrix.size() && matrix[i + 1][pj] == 1) {
        i++;
        j = pj;
        while (j + 1 <= maxj && matrix[i][j + 1] == 1 &&
               matrix[i - 1][j + 1] == 1)
            j++;
        int area = (i - pi + 1) * (j - pj + 1);
        if (area > maxArea)
            maxArea = area;
        maxj = j;
    }

    return maxArea;
}

// Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle
// full of ones, return its area.
static int MaximalRectangleFullOnes(vector<vector<char>> &matrix) {
    if (matrix.size() == 0 || matrix[0].size() == 0)
        return 0;
    int maxArea = 0;
    for (int i = 0; i < (int)matrix.size(); i++) {
        for (int j = 0; j < (int)matrix[i].size(); j++) {
            if (matrix[i][j] == 1) {
                int area = MaximalRectangleAtPoint(matrix, i, j);
                if (area > maxArea)
                    maxArea = area;
            }
        }
    }
    return maxArea;
}

// 118. Pascal's Triangle
// Given numRows, generate the first numRows of Pascal's triangle. For example,
// given numRows = 5, Return
// [
//      [1],
//     [1, 1],
//    [1, 2, 1],
//   [1, 3, 3, 1],
//  [1, 4, 6, 4, 1]
// ]
static vector<vector<int>> generate(int numRows) {
    vector<vector<int>> result;
    if (numRows <= 0)
        return result;
    vector<int> row;
    for (int i = 0; i < numRows; i++) {
        row.push_back(1);
        for (int j = row.size() - 2; j > 0; j--) {
            row[j] += row[j - 1];
        }
        result.push_back(row);
        row = vector<int>(row);
    }
    return result;
}

// 119. Pascal's Triangle II
// Given an index k, return the kth row of the Pascal's triangle. For example,
// given k = 3, Return [1, 3, 3, 1]. Note: Could you optimize your algorithm
// to use only O(k) extra space ?
static vector<int> getRow(int rowIndex) {
    vector<int> row;
    for (int k = 0; k <= rowIndex; k++) {
        row.push_back(1);
        for (int i = row.size() - 2; i > 0; i--) {
            row[i] += row[i - 1];
        }
    }
    return row;
}

// 120. Triangle
// Given a triangle, find the minimum path sum from top to bottom. Each step you
// may move to adjacent numbers on the row below. For example, given the
// following triangle
// [
//     [2],
//    [3, 4],
//   [6, 5, 7],
//  [4, 1, 8, 3]
// ]
// The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
// Note: Bonus point if you are able to do this using only O(n) extra space,
// where n is the total number of rows in the triangle.
static int minimumTotal(vector<vector<int>> &triangle) {
    vector<int> row(triangle[0]);
    for (size_t i = 1; i < triangle.size(); i++) {
        size_t n = triangle[i].size();
        row.push_back(row[n - 2] + triangle[i][n - 1]);
        for (int j = n - 2; j > 0; j--) {
            row[j] = triangle[i][j] + min(row[j - 1], row[j]);
        }
        row[0] += triangle[i][0];
    }
    int min = row[0];
    for (size_t i = 1; i < row.size(); i++) {
        if (row[i] < min)
            min = row[i];
    }
    return min;
}

// 155. Min Stack
// Design a stack that supports push, pop, top, and retrieving the minimum
// element in constant time.
// push(x) --  Push element x onto stack.
// pop()   --  Removes the element on top of the stack.
// top()   --  Get the top element.
// getMin() -- Retrieve the minimum element in the stack.
// Example:
// MinStack minStack = new MinStack();
// minStack.push(-2);
// minStack.push(0);
// minStack.push(-3);
// minStack.getMin();   --> Returns -3.
// minStack.pop();
// minStack.top();      --> Returns 0.
// minStack.getMin();   --> Returns -2.
class MinStack {
  private:
    stack<int> _items;
    stack<int> _mins;

  public:
    // initialize your data structure here.
    MinStack() {}

    void push(int x) {
        _items.push(x);
        if (!_mins.empty())
            x = min(_mins.top(), x);
        _mins.push(x);
    }

    void pop() {
        _items.pop();
        _mins.pop();
    }

    int top() { return _items.top(); }

    int getMin() { return _mins.top(); }
};

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

static void Print(ListNode *node) {
    if (node == nullptr)
        return;
    while (node != nullptr) {
        cout << node->val << "->";
        node = node->next;
    }
    cout << "null" << endl;
}

static void DeleteList(ListNode *node) {
    if (node == nullptr)
        return;
    ListNode *p = node;
    while (p != nullptr) {
        node = p->next;
        delete p;
        p = node;
    }
}

static ListNode *ToList(vector<int> &numbers) {
    ListNode *list = nullptr;
    if (numbers.size() == 0)
        return list;
    list = new ListNode(numbers[0]);
    ListNode *n = list;
    for (size_t i = 1; i < numbers.size(); i++) {
        n->next = new ListNode(numbers[i]);
        n = n->next;
    }
    return list;
}

static ListNode *MergeSortedLists(ListNode *l1, ListNode *l2) {
    if (l1 == nullptr)
        return l2;
    if (l2 == nullptr)
        return l1;

    ListNode *head = l1;
    if (l1->val > l2->val) {
        head = l2;
        l2 = l2->next;
    } else {
        l1 = l1->next;
    }

    ListNode *p = head;

    while (l1 != nullptr && l2 != nullptr) {
        if (l1->val <= l2->val) {
            if (p->next != l1)
                p->next = l1;
            p = l1;
            l1 = p->next;
        } else {
            if (p->next != l2)
                p->next = l2;
            p = l2;
            l2 = p->next;
        }
    }

    ListNode *q = l1 == nullptr ? l2 : l1;
    if (q != nullptr && p->next != q)
        p->next = q;

    return head;
}

// Merge k sorted linked lists and return it as one sorted list.
static ListNode *MergeKLists(vector<ListNode *> &lists) {
    if (lists.size() == 0)
        return nullptr;
    ListNode *list = nullptr;
    ListNode *tail = list;
    while (true) {
        ListNode *mp = nullptr;
        int mi = 0;
        for (int i = 0; i < (int)lists.size(); i++) {
            if (lists[i] != nullptr) {
                if (mp == nullptr || lists[i]->val < mp->val) {
                    mp = lists[i];
                    mi = i;
                }
            }
        }
        if (mp == nullptr)
            break;
        if (list == nullptr)
            list = mp;
        else
            tail->next = mp;
        tail = mp;
        lists[mi] = mp->next;
    }
    return list;
}
static bool Greater(ListNode *first, ListNode *second) {
    if (first == nullptr && second == nullptr)
        return false;
    if (first == nullptr && second != nullptr)
        return true;
    if (first != nullptr && second == nullptr)
        return false;
    if (first->val > second->val)
        return true;
    else
        return false;
}
static ListNode *MergeKLists2(vector<ListNode *> &lists) {
    if (lists.size() == 0)
        return nullptr;
    ListNode *list = nullptr;
    ListNode *tail = list;
    make_heap(lists.begin(), lists.end(), Greater);
    while (lists.front() != nullptr) {
        pop_heap(lists.begin(), lists.end(), Greater);
        if (list == nullptr)
            list = lists.back();
        else
            tail->next = lists.back();
        tail = lists.back();
        lists.back() = lists.back()->next;
        push_heap(lists.begin(), lists.end(), Greater);
    }
    return list;
}
static ListNode *MergeKLists3(vector<ListNode *> &lists) {
    if (lists.size() == 0)
        return nullptr;
    ListNode *list = nullptr;
    ListNode *tail = list;
    make_heap(lists.begin(), lists.end(), Greater);
    while (lists.size() > 0) {
        pop_heap(lists.begin(), lists.end(), Greater);
        if (lists.back() == nullptr)
            break;
        if (list == nullptr)
            list = lists.back();
        else
            tail->next = lists.back();
        tail = lists.back();
        lists.back() = lists.back()->next;
        if (lists.back() == nullptr)
            lists.pop_back();
        else
            push_heap(lists.begin(), lists.end(), Greater);
    }
    return list;
}

// 61. Rotate List
// Given a list, rotate the list to the right by k places, where k is
// non-negative. For example : Given 1->2->3->4->5->NULL and k = 2, return
// 4->5->1->2->3->NULL.
static ListNode *rotateRight(ListNode *head, int k) {
    if (head == nullptr)
        return head;
    ListNode *tail = head;
    int i = 1;
    while (tail->next != nullptr) {
        i++;
        tail = tail->next;
    }
    // tail is the last element and is the i-th element (1-based)
    k %= i;
    if (k == 0)
        return head;
    int j = i - k;
    // TODO: compute p in the while loop above.
    // Be careful when k is larger than the list length.
    ListNode *p = head;
    while (j > 1) {
        p = p->next;
        j--;
    }
    tail->next = head;
    head = p->next;
    p->next = nullptr;
    return head;
}
static ListNode *rotateRight2(ListNode *head, int k) {
    if (head == nullptr || k <= 0)
        return head;
    ListNode *p = head;
    ListNode *q = head;
    int i = 0;
    while (i < k && q->next != nullptr) {
        q = q->next;
        i++;
    }
    // q is the i-th element (0-based)
    if (q->next == nullptr) {
        int l = i + 1; // total length
        k = k % l;
        if (k == 0)
            return head;
        i = 0;
        q = head;
        while (i < k && q->next != nullptr) {
            q = q->next;
            i++;
        }
    }
    // q is the k-th element (0-based)
    while (q->next != nullptr) {
        q = q->next;
        p = p->next;
    }
    q->next = head;
    head = p->next;
    p->next = nullptr;
    return head;
}

// 92. Reverse Linked List II
// Reverse a linked list from position m to n. Do it in-place and in one-pass.
// For example : Given 1->2->3->4->5->NULL, m = 2 and n = 4,
// return 1->4->3->2->5->NULL.
// Note : Given m, n satisfy the following condition :
// 1 <= m <= n <= length of list.
static ListNode *reverseBetween(ListNode *head, int m, int n) {
    if (head == nullptr)
        return nullptr;
    ListNode *pm_prev = nullptr;
    ListNode *pm = nullptr;
    int i;
    if (m == 1) {
        pm = head;
    } else {
        pm_prev = head;
        i = 1;
        while (i < m - 1 && pm_prev->next != nullptr) {
            pm_prev = pm_prev->next;
            i++;
        }
        if (i < m - 1)
            return head;
        pm = pm_prev->next;
    }
    ListNode *pn = pm;
    i = m;
    while (i < n && pn->next != nullptr) {
        pn = pn->next;
        i++;
    }
    ListNode *pn_next = pn->next;
    ListNode *prev = pn_next;
    ListNode *curr = pm;
    ListNode *next = pm->next;
    while (curr != pn) {
        curr->next = prev;
        prev = curr;
        curr = next;
        next = curr->next;
    }
    curr->next = prev;
    if (pm_prev == nullptr) {
        head = pn;
    } else {
        pm_prev->next = pn;
    }
    return head;
}
static ListNode *reverseBetween2(ListNode *head, int m, int n) {
    if (head == nullptr || m <= 0 || n <= 0 || m >= n)
        return head;

    ListNode *ph = nullptr;
    ListNode *pm = head;
    int i = 1;
    while (i < m && pm->next != nullptr) {
        ph = pm;
        pm = pm->next;
        i++;
    }

    if (i < m)
        return head;

    ListNode *r = ph;
    ListNode *s = pm;
    ListNode *t = pm->next;

    while (i <= n && t != nullptr) {
        s->next = r;
        r = s;
        s = t;
        t = t->next;
        i++;
    }

    if (i <= n && t == nullptr) {
        s->next = r;
        r = s;
        s = t;
    }

    pm->next = s;
    if (ph != nullptr)
        ph->next = r;
    else
        head = r;

    return head;
}

// Given a linked list, swap every two adjacent nodes and return its head.
// For example, Given 1->2->3->4, you should return the list as 2->1->4->3.
// Your algorithm should use only constant space. You may not modify the
// values in the list, only nodes itself can be changed.
static ListNode *SwapPairs(ListNode *head) {
    if (head == nullptr || head->next == nullptr)
        return head;

    ListNode *f = head;
    ListNode *s = f->next;

    f->next = s->next;
    s->next = f;
    head = s;

    ListNode *p = f;
    f = f->next;
    while (f != nullptr) {
        s = f->next;
        if (s == nullptr)
            break;
        f->next = s->next;
        s->next = f;
        p->next = s;
        p = f;
        f = f->next;
    }
    return head;
}

// 143. Reorder List
// Given a singly linked list L: L0->L1->...->Ln-1->Ln, reorder it to:
// L0->Ln->L1->Ln-1->L2->Ln-2->... You must do this in-place without altering
// the nodes' values. For example, Given { 1,2,3,4 }, reorder it to { 1,4,2,3 }.
static void reorderList(ListNode *head) {
    if (head == nullptr)
        return;
    // Find the middle node. When the while-loop stops, pointer first
    // is the median node if there are odd number of nodes, or the higher
    // median node if there are even number of nodes.
    ListNode *first = head;
    ListNode *second = head;
    while (second != nullptr && second->next != nullptr) {
        first = first->next;
        second = second->next->next;
    }
    // Break the list into two lists
    ListNode *tail = first;
    ListNode *head2 = tail->next;
    tail->next = nullptr;
    if (head2 == nullptr)
        return;
    // Reverse the second list
    ListNode *prev = nullptr;
    ListNode *middle = head2;
    ListNode *next = middle->next;
    while (next != nullptr) {
        middle->next = prev;
        prev = middle;
        middle = next;
        next = middle->next;
    }
    middle->next = prev;
    // Merge the two lists
    head2 = middle;
    first = head;
    while (head2 != nullptr) {
        second = head2;
        head2 = second->next;
        second->next = first->next;
        first->next = second;
        first = second->next;
    }
}

// Given a linked list, remove the nth node from the end of list and return its
// head. For example, Given linked list: 1->2->3->4->5, and n = 2. After
// removing the second node from the end, the linked list becomes 1->2->3->5.
static ListNode *RemoveNthFromEnd(ListNode *head, int n) {
    if (head == nullptr || n <= 0)
        return head;
    ListNode *q = head;
    int i = 0;
    while (i < n && q->next != nullptr) {
        q = q->next;
        i++;
    }
    if (i < n - 1) // only i + 1 (less than n) nodes in the list
        return head;
    ListNode *p = head;
    if (i == n - 1) {
        // Exact i + 1 (= n) nodes in the list
        head = p->next;
        delete p;
        return head;
    }
    while (q->next != nullptr) {
        p = p->next;
        q = q->next;
    }
    q = p->next;
    p->next = q->next;
    delete q;
    return head;
}

// 83. Remove Duplicates from Sorted List
// Given a sorted linked list, delete all duplicates such that each element
// appear only once. For example, Given 1->1->2, return 1->2.
// Given 1->1->2->3->3, return 1->2->3.
static ListNode *deleteDuplicates(ListNode *head) {
    ListNode *p = head;
    while (p != nullptr) {
        if (p->next != nullptr && p->val == p->next->val) {
            ListNode *n = p->next;
            p->next = n->next;
            delete n;
        } else {
            p = p->next;
        }
    }
    return head;
}

// 82. Remove Duplicates from Sorted List II
// Given a sorted linked list, delete all nodes that have duplicate numbers,
// leaving only distinct numbers from the original list. For example,
// Given 1->2->3->3->4->4->5, return 1->2->5.
// Given 1->1->1->2->3, return 2->3.
static ListNode *deleteDuplicates2(ListNode *head) {
    ListNode *prev = nullptr;
    ListNode *p = head;
    ListNode *next = nullptr;
    while (p != nullptr) {
        if (p->next != nullptr && p->val == p->next->val) {
            int v = p->val;
            while (p != nullptr && p->val == v) {
                next = p->next;
                delete p;
                p = next;
            }
            if (prev == nullptr) {
                head = p;
            } else {
                prev->next = p;
            }
        } else {
            if (prev == nullptr) {
                head = p;
            } else {
                prev->next = p;
            }
            prev = p;
            p = p->next;
        }
    }
    return head;
}
static ListNode *deleteDuplicates2_1(ListNode *head) {
    if (head == nullptr)
        return nullptr;

    ListNode *p;

    while (head->next != nullptr && head->val == head->next->val) {
        int dup = head->val;
        while (head != nullptr && head->val == dup) {
            p = head;
            head = p->next;
            delete p;
        }

        if (head == nullptr)
            return nullptr;
    }

    if (head->next == nullptr)
        return head;

    p = head;
    ListNode *q = p->next;

    while (q->next != nullptr) {
        if (q->val != q->next->val) {
            p = q;
            q = p->next;
        } else {
            int dup = q->val;
            while (q != nullptr && q->val == dup) {
                p->next = q->next;
                delete q;
                q = p->next;
            }
            if (q == nullptr)
                return head;
        }
    }

    return head;
}

// 86. Partition List
// Given a linked list and a value x, partition it such that all nodes less than
// x come before nodes greater than or equal to x. You should preserve the
// original relative order of the nodes in each of the two partitions. For
// example, Given 1->4->3->2->5->2 and x = 3, return 1->2->2->4->3->5.
static ListNode *partition(ListNode *head, int x) {
    if (head == nullptr)
        return head;
    ListNode *prev = nullptr;
    if (head->val < x) {
        prev = head;
    }
    ListNode *p = head;
    while (p->next != nullptr) {
        if (p->next->val < x) {
            if (prev == p) {
                prev = p->next;
                p = p->next;
            } else {
                ListNode *next = p->next;
                p->next = next->next;
                if (prev == nullptr) {
                    next->next = head;
                    head = next;
                    prev = next;
                } else {
                    next->next = prev->next;
                    prev->next = next;
                    prev = next;
                }
            }
        } else {
            p = p->next;
        }
    }
    return head;
}
static ListNode *partition2(ListNode *head, int x) {
    if (head == nullptr)
        return nullptr;

    // p is the last node less than x
    ListNode *p = head;

    // q is the last node no less than x
    ListNode *q = head;

    if (head->val >= x) {
        while (q->next != nullptr && q->next->val >= x)
            q = q->next;
        if (q->next == nullptr) {
            // every node is equal to or greater than x
            return head;
        }

        // q->next is less than x
        ListNode *t = q->next;
        q->next = t->next;
        t->next = head;
        head = t;

        p = head;
    } else {
        while (p->next != nullptr && p->next->val < x)
            p = p->next;
        if (p->next == nullptr) {
            // every node is less than x
            return head;
        }

        q = p->next;
    }

    // Now check if q->next should be moved to be after p

    while (q->next != nullptr) {
        if (q->next->val < x) {
            ListNode *t = q->next;
            q->next = t->next;
            t->next = p->next;
            p->next = t;
            p = t;
        } else {
            q = q->next;
        }
    }

    return head;
}

// 147. Insertion Sort List
// Sort a linked list using insertion sort.
static ListNode *insertionSortList(ListNode *head) {
    if (head == nullptr || head->next == nullptr)
        return head;
    ListNode *p = head;
    while (p->next != nullptr) {
        if (p->val <= p->next->val) {
            p = p->next;
        } else {
            ListNode *q = p->next;
            p->next = q->next;
            q->next = nullptr;
            if (q->val < head->val) {
                q->next = head;
                head = q;
            } else {
                ListNode *s = head;
                while (s != p && s->next != nullptr && s->next->val <= q->val) {
                    s = s->next;
                }
                q->next = s->next;
                s->next = q;
            }
        }
    }
    return head;
}

// 148. Sort List
// Sort a linked list in O(nlogn) time using constant space complexity.
static ListNode *sortList(ListNode *head) {
    if (head == nullptr || head->next == nullptr)
        return head;
    function<ListNode *(ListNode *, ListNode *)> merge =
        [&](ListNode *l1, ListNode *l2) -> ListNode * {
        if (l1 == nullptr)
            return l2;
        if (l2 == nullptr)
            return l1;
        ListNode *h = nullptr;
        if (l1->val <= l2->val) {
            h = l1;
            l1 = l1->next;
        } else {
            h = l2;
            l2 = l2->next;
        }
        ListNode *p = h;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val <= l2->val) {
                p->next = l1;
                l1 = l1->next;
            } else {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        p->next = l1 == nullptr ? l2 : l1;
        return h;
    };
    function<ListNode *(ListNode *)> sort = [&](ListNode *h) -> ListNode * {
        if (h == nullptr || h->next == nullptr)
            return h;
        ListNode *p = h;
        ListNode *q = h->next;
        while (q != nullptr && q->next != nullptr) {
            p = p->next;
            q = q->next->next;
        }
        q = p->next;
        p->next = nullptr;
        p = sort(h);
        q = sort(q);
        p = merge(p, q);
        return p;
    };
    return sort(head);
}

// 141. Linked List Cycle
// Given a linked list, determine if it has a cycle in it.
// Follow up: Can you solve it without using extra space?
static bool hasCycle(ListNode *head) {
    if (head == nullptr)
        return false;
    ListNode *p1 = head;
    ListNode *p2 = head;
    while (p2 != nullptr && p2->next != nullptr) {
        p1 = p1->next;
        p2 = p2->next->next;
        if (p1 == p2)
            return true;
    }
    return false;
}

// 142. Linked List Cycle II
// Given a linked list, return the node where the cycle begins. If there is no
// cycle, return null. Note: Do not modify the linked list.
// Follow up: Can you solve it without using extra space?
static ListNode *detectCycle(ListNode *head) {
    ListNode *p1 = head;
    ListNode *p2 = head;
    while (p2 != nullptr && p2->next != nullptr) {
        p1 = p1->next;
        p2 = p2->next->next;
        if (p1 == p2)
            break;
    }
    if (p2 == nullptr || p2->next == nullptr)
        return nullptr;
    p1 = head;
    while (p1 != p2) {
        p1 = p1->next;
        p2 = p2->next;
    }
    return p1;
}

// 160. Intersection of Two Linked Lists
// Write a program to find the node at which the intersection of two singly
// linked lists begins. For example, the following two linked lists:
// A:        a1 -> a2
//                   \
//                    >
//                     c1 -> c2 -> c3
//                    >
//                   /
// B : b1 -> b2 -> b3
// begin to intersect at node c1. Notes: If the two linked lists have no
// intersection at all, return null. The linked lists must retain their original
// structure after the function returns. You may assume there are no cycles
// anywhere in the entire linked structure. Your code should preferably run in
// O(n) time and use only O(1) memory.
static ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    function<int(ListNode *)> getLength = [&](ListNode *h) -> int {
        int i = 0;
        while (h != nullptr) {
            i++;
            h = h->next;
        }
        return i;
    };
    function<ListNode *(ListNode *, int)> advance = [&](ListNode *h,
                                                        int n) -> ListNode * {
        while (n > 0) {
            h = h->next;
            n--;
        }
        return h;
    };
    int la = getLength(headA);
    int lb = getLength(headB);
    ListNode *pa = headA;
    ListNode *pb = headB;
    if (la > lb)
        pa = advance(pa, la - lb);
    else
        pb = advance(pb, lb - la);
    while (pa != pb) {
        pa = pa->next;
        pb = pb->next;
    }
    return pa;
}
static ListNode *getIntersectionNode2(ListNode *headA, ListNode *headB) {
    ListNode *pa = headA;
    ListNode *pb = headB;
    while (pa != nullptr && pb != nullptr && pa != pb) {
        pa = pa->next;
        pb = pb->next;
        if (pa == pb)
            break;
        if (pa == nullptr)
            pa = headB;
        if (pb == nullptr)
            pb = headA;
    }
    return pa == pb ? pa : nullptr;
}

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

static void Print(TreeNode *node) {
    function<void(stringstream *, int, char)> printChar = [&](stringstream *s,
                                                              int n, char c) {
        if (n > 0) {
            string chars(n, c);
            *s << chars;
        }
    };

    function<void(TreeNode *, unsigned int, int &, int &,
                  vector<stringstream *> &)>
        toString =
            [&](TreeNode *n,    // current node to print
                unsigned int y, // current node level
                int &x, // x-axis position of root of last printed sub tree
                int &r, // x-axis position of right-most boundary of last
                        // printed sub tree
                vector<stringstream *> &ss // output streams, one per level
            ) {
                if (n == nullptr)
                    return;

                if (ss.size() <= y)
                    ss.push_back(new stringstream());

                // print left tree, update x and r accordingly
                toString(n->left, y + 1, x, r, ss);

                stringstream *s = ss[y];

                int l = (int)(s->str().length());
                if (l < x)
                    printChar(s, x - l, ' ');

                if (n->left != nullptr && r > x) {
                    *s << '/';
                    printChar(s, r - x - 1, '-');
                }

                string nc = to_string(n->val);
                *s << nc;

                x = (r + (nc.length() >> 1));
                r = r + nc.length();

                int rx = r;
                int rr = r;
                toString(n->right, y + 1, rx, rr, ss);

                if (n->right != nullptr && rx >= r) {
                    printChar(s, rx - r - 1, '-');
                    *s << '\\';
                }

                // Update the right most boundary
                r = rr;
            };

    vector<stringstream *> streams;
    int x = 0;
    int r = 0;
    toString(node, 0, x, r, streams);

    for_each(streams.begin(), streams.end(), [&](stringstream *s) {
        cout << s->str() << endl;
        delete s;
    });
}

static void DeleteTree(TreeNode *root) {
    if (root == nullptr)
        return;
    if (root->left != nullptr) {
        DeleteTree(root->left);
        root->left = nullptr;
    }
    if (root->right != nullptr) {
        DeleteTree(root->right);
        root->right = nullptr;
    }
    delete root;
}

static TreeNode *Clone(TreeNode *root) {
    if (root == nullptr)
        return nullptr;
    TreeNode *clone = new TreeNode(root->val);
    clone->left = Clone(root->left);
    clone->right = Clone(root->right);
    return clone;
}

// The root-to-leaf path 1->2 represents the number 12.
// The root-to-leaf path 1->3 represents the number 13.
// Return the sum = 12 + 13 = 25.
static int sumNumbers(TreeNode *root) {
    function<void(TreeNode *, int, int &)> sum =
        [&](TreeNode *node, int pathSum, int &totalSum) {
            if (node == nullptr)
                return;
            pathSum = pathSum * 10 + node->val;
            if (node->left == nullptr && node->right == nullptr) {
                totalSum += pathSum;
                return;
            }
            if (node->left != nullptr)
                sum(node->left, pathSum, totalSum);
            if (node->right != nullptr)
                sum(node->right, pathSum, totalSum);
        };
    int total = 0;
    sum(root, 0, total);
    return total;
}

// 112. Path Sum
// Given a binary tree and a sum, determine if the tree has a root-to-leaf path
// such that adding up all the values along the path equals the given sum. For
// example: Given the below binary tree and sum = 22,
//       5
//      / \
//     4   8
//    /   / \
//   11  13  4
//  / \       \
// 7    2      1
// return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
static bool hasPathSum(TreeNode *root, int sum) {
    function<bool(TreeNode *, int)> solve = [&](TreeNode *node,
                                                int parentSum) -> bool {
        if (node == nullptr)
            return false;
        parentSum += node->val;
        if (node->left == nullptr && node->right == nullptr)
            return parentSum == sum;
        return (node->left != nullptr && solve(node->left, parentSum)) ||
               (node->right != nullptr && solve(node->right, parentSum));
    };
    return solve(root, 0);
}

// 113. Path Sum II
// Given a binary tree and a sum, find all root-to-leaf paths where each path's
// sum equals the given sum. For example: Given the below binary tree and sum =
// 22,
//       5
//      / \
//     4   8
//    /   / \
//   11  13  4
//  /  \    / \
// 7    2  5   1
// return
// [
//  [5, 4, 11, 2],
//  [5, 8, 4, 5]
// ]
static vector<vector<int>> pathSum(TreeNode *root, int sum) {
    vector<vector<int>> result;
    function<void(TreeNode *, int, vector<int> &)> solve =
        [&](TreeNode *node, int parentSum, vector<int> &parents) {
            if (node == nullptr)
                return;
            parentSum += node->val;
            parents.push_back(node->val);
            if (node->left == nullptr && node->right == nullptr) {
                if (parentSum == sum) {
                    result.push_back(parents);
                }
            } else {
                if (node->left != nullptr) {
                    vector<int> v(parents);
                    solve(node->left, parentSum, v);
                }
                if (node->right != nullptr) {
                    vector<int> v(parents);
                    solve(node->right, parentSum, v);
                }
            }
        };
    vector<int> c;
    solve(root, 0, c);
    return result;
}

// 144. Binary Tree Preorder Traversal
// Given a binary tree, return the preorder traversal of its nodes' values.
// For example: Given binary tree { 1,#,2,3 },
//  1
//   \
//    2
//   /
//  3
// return [1, 2, 3].
// Note: Recursive solution is trivial, could you do it iteratively?
static vector<int> preorderTraversal(TreeNode *root) {
    vector<int> result;
    if (root == nullptr)
        return result;
    stack<TreeNode *> stack;
    stack.push(root);
    TreeNode *node;
    while (!stack.empty()) {
        node = stack.top();
        stack.pop();
        result.push_back(node->val);
        if (node->right != nullptr)
            stack.push(node->right);
        if (node->left != nullptr)
            stack.push(node->left);
    }
    return result;
}

// 94. Binary Tree Inorder Traversal
// Given a binary tree, return the inorder traversal of its nodes' values.
// For example : Given binary tree[1, null, 2, 3],
//   1
//    \
//     2
//    /
//   3
// return[1, 3, 2].
// Note: Recursive solution is trivial, could you do it iteratively?
static vector<int> inorderTraversal(TreeNode *root) {
    stack<TreeNode *> path;
    TreeNode *node = root;
    vector<int> result;
    while (!path.empty() || node != nullptr) {
        if (node != nullptr) {
            path.push(node);
            node = node->left;
        } else {
            node = path.top();
            path.pop();
            result.push_back(node->val);
            node = node->right;
        }
    }
    return result;
}
static vector<int> inorderTraversal_2(TreeNode *root) {
    if (root == nullptr)
        return vector<int>{};
    stack<TreeNode *> path;
    TreeNode *lastVisited = nullptr;
    path.push(root);
    TreeNode *node;
    vector<int> result;
    while (!path.empty()) {
        node = path.top();
        if (node->right != nullptr && node->right == lastVisited) {
            path.pop();
            lastVisited = node;
        } else if (node->left != nullptr && node->left != lastVisited) {
            path.push(node->left);
            lastVisited = node;
        } else {
            // left is null or left is just visited
            result.push_back(node->val);
            lastVisited = node;
            if (node->right != nullptr) {
                path.push(node->right);
            } else {
                path.pop();
            }
        }
    }
    return result;
}

// 145. Binary Tree Postorder Traversal
// Given a binary tree, return the postorder traversal of its nodes' values.
// For example: Given binary tree { 1,#,2,3 },
//  1
//   \
//    2
//   /
//  3
// return [3, 2, 1].
// Note: Recursive solution is trivial, could you do it iteratively?
static vector<int> postorderTraversal(TreeNode *root) {
    vector<int> result;
    if (root == nullptr)
        return result;
    stack<TreeNode *> stack;
    TreeNode *lastVisited = nullptr;
    TreeNode *node = root;
    while (!stack.empty() || node != nullptr) {
        if (node != nullptr) {
            stack.push(node);
            lastVisited = node;
            node = node->left;
        } else {
            TreeNode *top = stack.top();
            if (top->right != nullptr && lastVisited != top->right) {
                node = top->right;
            } else {
                stack.pop();
                result.push_back(top->val);
                lastVisited = top;
            }
        }
    }
    return result;
}

// 95. Unique Binary Search Trees II
// Given an integer n, generate all structurally unique BST's (binary search
// trees) that store values 1...n. For example, Given n = 3, your program should
// return all 5 unique BST's shown below.
//  1         3     3      2      1
//   \       /     /      / \      \
//    3     2     1      1   3      2
//   /     /       \                 \
//  2     1         2                 3
static vector<TreeNode *> generateTrees(int n) {
    if (n <= 0)
        return vector<TreeNode *>{};
    function<vector<vector<int>>(int, int)> generateSerializations =
        [&](int i, int j) -> vector<vector<int>> {
        vector<vector<int>> serializations;
        if (i > j) {
            serializations.push_back(vector<int>{0});
        } else {
            for (int k = i; k <= j; k++) {
                vector<vector<int>> leftSerializations =
                    generateSerializations(i, k - 1);
                vector<vector<int>> rightSerializations =
                    generateSerializations(k + 1, j);
                for (size_t l = 0; l < leftSerializations.size(); l++) {
                    for (size_t r = 0; r < rightSerializations.size(); r++) {
                        vector<int> serialization = {k};
                        serialization.insert(serialization.end(),
                                             leftSerializations[l].begin(),
                                             leftSerializations[l].end());
                        serialization.insert(serialization.end(),
                                             rightSerializations[r].begin(),
                                             rightSerializations[r].end());
                        serializations.push_back(serialization);
                    }
                }
            }
        }
        return serializations;
    };
    function<TreeNode *(size_t &, vector<int> &)> generateTree =
        [&](size_t &i, vector<int> &serialization) -> TreeNode * {
        if (i >= serialization.size())
            return nullptr;
        if (serialization[i] == 0) {
            i++;
            return nullptr;
        }
        TreeNode *node = new TreeNode(serialization[i++]);
        node->left = generateTree(i, serialization);
        node->right = generateTree(i, serialization);
        return node;
    };
    vector<vector<int>> serializations = generateSerializations(1, n);
    vector<TreeNode *> trees;
    for (size_t i = 0; i < serializations.size(); i++) {
        size_t j = 0;
        trees.push_back(generateTree(j, serializations[i]));
    }
    return trees;
}
// incomplete
static vector<TreeNode *> generateTrees_2(int n) {
    if (n <= 0)
        return vector<TreeNode *>{};
    function<vector<TreeNode *>(int, int)> solve =
        [&](int i, int j) -> vector<TreeNode *> {
        if (i > j) {
            return vector<TreeNode *>{nullptr};
        }
        if (i == j) {
            return vector<TreeNode *>{new TreeNode(i)};
        }
        for (int k = i; k <= j; k++) {
            vector<TreeNode *> leftChildren = solve(i, k - 1);
            vector<TreeNode *> rightChildren = solve(k + 1, j);
        }
        return vector<TreeNode *>{};
    };
    return solve(1, n);
}

// 96. Unique Binary Search Trees
// Given n, how many structurally unique BST's (binary search trees) that store
// values 1...n? For example, Given n = 3, there are a total of 5 unique BST's.
// 1         3     3      2      1
//  \       /     /      / \      \
//   3     2     1      1   3      2
//  /     /       \                 \
// 2     1         2                 3
static int numTrees(int n) {
    if (n <= 0)
        return 0;
    map<pair<int, int>, int> solved;
    function<int(int, int)> count = [&](int i, int j) -> int {
        if (i >= j)
            return 1;
        pair<int, int> p = make_pair(i, j);
        if (solved.find(p) != solved.end())
            return solved[p];
        int c = 0;
        for (int k = i; k <= j; k++) {
            c += (count(i, k - 1) * count(k + 1, j));
        }
        solved[p] = c;
        return c;
    };
    return count(1, n);
}
// c[n] = c[0]*c[n-1] + c[1]*c[n-2] + ... + c[n-2]*c[1] + c[n-1]*c[0]
static int numTrees2(int n) {
    if (n <= 0)
        return 0;
    vector<int> count(n + 1, 0);
    count[0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < i; j++) {
            count[i] += count[j] * count[i - j - 1];
        }
    }
    return count[n];
}

// 98. Validate Binary Search Tree
// Given a binary tree, determine if it is a valid binary search tree (BST).
// Assume a BST is defined as follows: The left subtree of a node contains only
// nodes with keys less than the node's key. The right subtree of a node
// contains only nodes with keys greater than the node's key. Both the left and
// right subtrees must also be binary search trees. Example 1:
//   2
//  / \
// 1   3
// Binary tree [2, 1, 3], return true. Example 2:
//   1
//  / \
// 2   3
// Binary tree [1, 2, 3], return false.
// In-order traverse and check whether values are increasing.
static bool isValidBST(TreeNode *root) {
    stack<TreeNode *> path;
    TreeNode *node = root;
    TreeNode *prev = nullptr;
    while (!path.empty() || node != nullptr) {
        if (node != nullptr) {
            // Move left as much as possible
            path.push(node);
            node = node->left;
        } else {
            // == case 1 ========
            // node is null and is the left child of the top of stack
            //   top
            //   / \
            // null ...
            // == case 2 ========
            // node is null and is the right child of the last visited node
            //     top
            //     /
            //    o
            //   / \
            // null ...
            //       \
            //        o <-- last visited (prev)
            //       / \
            //    null null
            // In both cases, left subtree is done, the top is the one to visit
            node = path.top();
            // Pop the top because no need to visit it again
            path.pop();
            // Visit current node
            if (prev != nullptr && prev->val >= node->val)
                return false;
            prev = node;
            // Move right
            node = node->right;
        }
    }
    return true;
}
static bool isValidBST2(TreeNode *root) {
    if (root == nullptr)
        return true;
    stack<TreeNode *> path;
    path.push(root);
    TreeNode *node = root;
    TreeNode *prev = nullptr;
    TreeNode *lastVisited = nullptr;
    while (!path.empty()) {
        node = path.top();
        if (node->right != nullptr && node->right == lastVisited) {
            lastVisited = node;
            path.pop();
        } else if (node->left != nullptr && node->left != lastVisited) {
            lastVisited = node;
            path.push(node->left);
        } else {
            if (prev != nullptr && prev->val >= node->val)
                return false;
            prev = node;
            lastVisited = node;
            if (node->right != nullptr)
                path.push(node->right);
            else
                path.pop();
        }
    }
    return true;
}
static bool isValidBST3(TreeNode *root) {
    function<bool(TreeNode *, int &, int &)> verify =
        [&](TreeNode *node, int &min, int &max) -> bool {
        if (node == nullptr)
            return true;
        if (node->left == nullptr && node->right == nullptr) {
            min = node->val;
            max = node->val;
            return true;
        }

        if (node->left == nullptr) {
            min = node->val;
        } else {
            int leftMin;
            int leftMax;
            if (!verify(node->left, leftMin, leftMax))
                return false;
            if (leftMax >= node->val)
                return false;
            min = leftMin;
        }

        if (node->right == nullptr) {
            max = node->val;
        } else {
            int rightMin;
            int rightMax;
            if (!verify(node->right, rightMin, rightMax))
                return false;
            if (rightMin <= node->val)
                return false;
            max = rightMax;
        }

        return true;
    };

    int min;
    int max;
    return verify(root, min, max);
}

// 100. Same Tree
// Given two binary trees, write a function to check if they are equal or not.
// Two binary trees are considered equal if they are structurally identical and
// the nodes have the same value.
static bool isSameTree(TreeNode *p, TreeNode *q) {
    function<bool(TreeNode *, TreeNode *)> isSame =
        [&](TreeNode *node1, TreeNode *node2) -> bool {
        if (node1 == nullptr && node2 == nullptr)
            return true;
        if (node1 == nullptr || node2 == nullptr)
            return false;
        if (node1->val != node2->val)
            return false;
        if (!isSame(node1->left, node2->left))
            return false;
        return isSame(node1->right, node2->right);
    };
    return isSame(p, q);
}

// 101. Symmetric Tree
// Given a binary tree, check whether it is a mirror of itself (ie, symmetric
// around its center). For example, this binary tree [1, 2, 2, 3, 4, 4, 3] is
// symmetric :
//     1
//    / \
//   2   2
//  / \ / \
// 3  4 4  3
// But the following[1, 2, 2, null, 3, null, 3] is not:
//   1
//  / \
// 2   2
//  \   \
//   3   3
// Note: Bonus points if you could solve it both recursively and iteratively.
static bool isSymmetric(TreeNode *root) {
    function<bool(TreeNode *, TreeNode *)> isSame =
        [&](TreeNode *node1, TreeNode *node2) -> bool {
        if (node1 == nullptr && node2 == nullptr)
            return true;
        if (node1 == nullptr || node2 == nullptr)
            return false;
        if (node1->val != node2->val)
            return false;
        if (!isSame(node1->left, node2->right))
            return false;
        return isSame(node1->right, node2->left);
    };
    return isSame(root, root);
}
static bool isSymmetric_2(TreeNode *root) {
    deque<TreeNode *> deq;
    deq.push_front(root);
    deq.push_back(root);
    TreeNode *node1;
    TreeNode *node2;
    while (!deq.empty()) {
        node1 = deq.front();
        deq.pop_front();
        node2 = deq.back();
        deq.pop_back();
        if (node1 == nullptr && node2 == nullptr)
            continue;
        if (node1 == nullptr || node2 == nullptr)
            return false;
        if (node1->val != node2->val)
            return false;
        deq.push_front(node1->right);
        deq.push_front(node1->left);
        deq.push_back(node2->left);
        deq.push_back(node2->right);
    }
    return true;
}

// 110. Balanced Binary Tree
// Given a binary tree, determine if it is height-balanced. For this problem,
// a height-balanced binary tree is defined as a binary tree in which the depth
// of the two subtrees of every node never differ by more than 1.
static bool isBalanced(TreeNode *root) {
    function<bool(TreeNode *, int &)> solve = [&](TreeNode *node,
                                                  int &depth) -> bool {
        if (node == nullptr) {
            depth = 0;
            return true;
        }
        int leftDepth;
        if (!solve(node->left, leftDepth))
            return false;
        int rightDepth;
        if (!solve(node->right, rightDepth))
            return false;
        if (abs(leftDepth - rightDepth) > 1)
            return false;
        depth = 1 + max(leftDepth, rightDepth);
        return true;
    };
    int depth;
    return solve(root, depth);
}

// 102. Binary Tree Level Order Traversal
// Given a binary tree, return the level order traversal of its nodes' values.
// (ie, from left to right, level by level). For example :
// Given binary tree [3, 9, 20, null, null, 15, 7],
//   3
//  / \
// 9  20
//    / \
//  15   7
// return its level order traversal as :
// [
//  [3],
//  [9, 20],
//  [15, 7]
// ]
static vector<vector<int>> levelOrder(TreeNode *root) {
    vector<vector<int>> result;
    if (root == nullptr)
        return result;
    queue<TreeNode *> q[2];
    q[0].push(root);
    int level = 0;
    while (!q[0].empty() || !q[1].empty()) {
        int currentLevel = level % 2;
        int nextLevel = (level + 1) % 2;
        vector<int> v;
        TreeNode *node;
        while (!q[currentLevel].empty()) {
            node = q[currentLevel].front();
            q[currentLevel].pop();
            v.push_back(node->val);
            if (node->left != nullptr)
                q[nextLevel].push(node->left);
            if (node->right != nullptr)
                q[nextLevel].push(node->right);
        }
        result.push_back(v);
        level++;
    }
    return result;
}

// 103. Binary Tree Zigzag Level Order Traversal
// Given a binary tree, return the zigzag level order traversal of its nodes'
// values. (ie, from left to right, then right to left for the next level and
// alternate between). For example :
// Given binary tree [3, 9, 20, null, null, 15, 7],
//   3
//  / \
// 9  20
//    / \
//  15   7
// return its zigzag level order traversal as :
// [
//  [3],
//  [20, 9],
//  [15, 7]
// ]
static vector<vector<int>> zigzagLevelOrder(TreeNode *root) {
    vector<vector<int>> result;
    if (root == nullptr)
        return result;
    deque<TreeNode *> q[2];
    int level = 0;
    bool leftToRight = true;
    q[0].push_back(root);
    while (!q[0].empty() || !q[1].empty()) {
        int currentLevel = level % 2;
        int nextLevel = (level + 1) % 2;
        vector<int> v;
        TreeNode *node;
        if (leftToRight) {
            while (!q[currentLevel].empty()) {
                node = q[currentLevel].front();
                q[currentLevel].pop_front();
                v.push_back(node->val);
                if (node->left != nullptr)
                    q[nextLevel].push_back(node->left);
                if (node->right != nullptr)
                    q[nextLevel].push_back(node->right);
            }
        } else {
            while (!q[currentLevel].empty()) {
                node = q[currentLevel].back();
                q[currentLevel].pop_back();
                v.push_back(node->val);
                if (node->right != nullptr)
                    q[nextLevel].push_front(node->right);
                if (node->left != nullptr)
                    q[nextLevel].push_front(node->left);
            }
        }
        result.push_back(v);
        level++;
        leftToRight = !leftToRight;
    }
    return result;
}

// 107. Binary Tree Level Order Traversal II
// Given a binary tree, return the bottom-up level order traversal of its nodes'
// values. (ie, from left to right, level by level from leaf to root). For
// example : Given binary tree [3, 9, 20, null, null, 15, 7],
//   3
//  / \
// 9  20
//    / \
//  15   7
// return its bottom - up level order traversal as :
// [
//   [15, 7],
//   [9, 20],
//   [3]
// ]
static vector<vector<int>> levelOrderBottom(TreeNode *root) {
    vector<vector<int>> result;
    if (root == nullptr)
        return result;
    queue<TreeNode *> q[2];
    q[0].push(root);
    int level = 0;
    TreeNode *node;
    while (!q[0].empty() || !q[1].empty()) {
        int currentLevel = level % 2;
        int nextLevel = (level + 1) % 2;
        vector<int> v;
        while (!q[currentLevel].empty()) {
            node = q[currentLevel].front();
            q[currentLevel].pop();
            v.push_back(node->val);
            if (node->left != nullptr)
                q[nextLevel].push(node->left);
            if (node->right != nullptr)
                q[nextLevel].push(node->right);
        }
        result.insert(result.begin(), v);
        level++;
    }
    return result;
}

// 199. Binary Tree Right Side View
// Given a binary tree, imagine yourself standing on the right side of it,
// return the values of the nodes you can see ordered from top to bottom.
// For example: Given the following binary tree,
//   1      <---
//  / \
// 2   3    <---
//  \   \
//   5   4  <---
// You should return [1, 3, 4].
static vector<int> rightSideView(TreeNode *root) {
    vector<int> result;
    if (root == nullptr)
        return result;
    queue<TreeNode *> q[2];
    q[0].push(root);
    int level = 0;
    int current = 0;
    int next = 0;
    TreeNode *p;
    while (!q[0].empty() || !q[1].empty()) {
        current = level % 2;
        next = (level + 1) % 2;
        p = q[current].front();
        result.push_back(p->val);
        while (!q[current].empty()) {
            p = q[current].front();
            q[current].pop();
            if (p->right != nullptr) {
                q[next].push(p->right);
            }
            if (p->left != nullptr) {
                q[next].push(p->left);
            }
        }
        level++;
    }
    return result;
}

// 104. Maximum Depth of Binary Tree
// Given a binary tree, find its maximum depth. The maximum depth is the number
// of nodes along the longest path from the root node down to the farthest leaf
// node.
static int maxDepth(TreeNode *root) {
    function<int(TreeNode *)> depth = [&](TreeNode *node) -> int {
        if (node == nullptr)
            return 0;
        if (node->left == nullptr && node->right == nullptr)
            return 1;
        return 1 + max(depth(node->left), depth(node->right));
    };
    return depth(root);
}
// This is wrong
static int maxDepth_2(TreeNode *root) {
    if (root == nullptr)
        return 0;
    stack<TreeNode *> path;
    path.push(root);
    TreeNode *node;
    int depth = 1;
    int maxDepth = 0;
    while (!path.empty()) {
        if (depth > maxDepth) {
            maxDepth = depth;
        }
        node = path.top();
        path.pop();
        if (node->right == nullptr && node->left == nullptr) {
            depth--;
        } else {
            depth++;
            if (node->right != nullptr)
                path.push(node->right);
            if (node->left != nullptr)
                path.push(node->left);
        }
    }
    return maxDepth;
}

// 111. Minimum Depth of Binary Tree
// Given a binary tree, find its minimum depth. The minimum depth is the number
// of nodes along the shortest path from the root node down to the nearest leaf
// node.
static int minDepth(TreeNode *root) {
    function<int(TreeNode *, int)> solve = [&](TreeNode *node,
                                               int depth) -> int {
        if (node == nullptr)
            return depth;
        depth++;
        if (node->left == nullptr)
            return solve(node->right, depth);
        else if (node->right == nullptr)
            return solve(node->left, depth);
        else
            return min(solve(node->left, depth), solve(node->right, depth));
    };
    return solve(root, 0);
}

// 105. Construct Binary Tree from Preorder and Inorder Traversal
// Given preorder and inorder traversal of a tree, construct the binary tree.
// Note: You may assume that duplicates do not exist in the tree.
static TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
    function<TreeNode *(int, int, int, int)> build = [&](int i1, int i2, int j1,
                                                         int j2) -> TreeNode * {
        if (i1 > i2)
            return nullptr;
        TreeNode *node = new TreeNode(preorder[i1]);
        int k;
        for (k = j1; k <= j2; k++) {
            if (preorder[i1] == inorder[k])
                break;
        }
        if (k <= j2) {
            node->left = build(i1 + 1, i1 + k - j1, j1, k - 1);
            node->right = build(i1 + k - j1 + 1, i2, k + 1, j2);
        }
        return node;
    };
    return build(0, preorder.size() - 1, 0, inorder.size() - 1);
}

// 106. Construct Binary Tree from Inorder and Postorder Traversal
// Given inorder and postorder traversal of a tree, construct the binary tree.
// Note: You may assume that duplicates do not exist in the tree.
static TreeNode *buildTreeInOrderPostOrder(vector<int> &inorder,
                                           vector<int> &postorder) {
    function<TreeNode *(int, int, int, int)> build = [&](int i1, int i2, int j1,
                                                         int j2) -> TreeNode * {
        if (j1 > j2)
            return nullptr;
        TreeNode *node = new TreeNode(postorder[j2]);
        int k;
        for (k = i1; k <= i2; k++) {
            if (inorder[k] == postorder[j2])
                break;
        }
        if (k <= i2) {
            node->left = build(i1, k - 1, j1, j2 - i2 + k - 1);
            node->right = build(k + 1, i2, j2 - i2 + k, j2 - 1);
        }
        return node;
    };
    return build(0, inorder.size() - 1, 0, postorder.size() - 1);
}

// 108. Convert Sorted Array to Binary Search Tree
// Given an array where elements are sorted in ascending order, convert it to a
// height balanced BST.
static TreeNode *sortedArrayToBST(vector<int> &nums) {
    function<TreeNode *(int, int)> build = [&](int i, int j) -> TreeNode * {
        if (i > j)
            return nullptr;
        int k = i + ((j - i) >> 1);
        TreeNode *node = new TreeNode(nums[k]);
        node->left = build(i, k - 1);
        node->right = build(k + 1, j);
        return node;
    };
    return build(0, nums.size() - 1);
}

// 109. Convert Sorted List to Binary Search Tree
// Given a singly linked list where elements are sorted in ascending order,
// convert it to a height balanced BST.
static TreeNode *sortedListToBST(ListNode *head) {
    if (head == nullptr)
        return nullptr;
    if (head->next == nullptr)
        return new TreeNode(head->val);
    function<TreeNode *(ListNode *, ListNode *)> build =
        [&](ListNode *b, ListNode *e) -> TreeNode * {
        if (b == nullptr || e == nullptr)
            return nullptr;
        TreeNode *node;
        if (b == e) {
            node = new TreeNode(b->val);
        } else if (b->next == e) {
            node = new TreeNode(b->val);
            node->right = new TreeNode(e->val);
        } else {
            ListNode *p = b;
            ListNode *q = p->next->next;
            while (q != e && q->next != e) {
                p = p->next;
                q = q->next;
                q = q->next;
            }
            node = new TreeNode(p->next->val);
            node->left = build(b, p);
            node->right = build(p->next->next, e);
        }
        return node;
    };
    ListNode *p = head;
    ListNode *q = p->next;
    while (q->next != nullptr && q->next->next != nullptr) {
        p = p->next;
        q = q->next;
        q = q->next;
    }
    TreeNode *node = new TreeNode(p->next->val);
    node->left = build(head, p);
    node->right = build(p->next->next, q->next == nullptr ? q : q->next);
    return node;
}

// 114. Flatten Binary Tree to Linked List
// Given a binary tree, flatten it to a linked list in-place. For example, Given
//     1
//    / \
//   2   5
//  / \   \
// 3   4   6
// The flattened tree should look like:
// 1
//  \
//   2
//    \
//     3
//      \
//       4
//        \
//         5
//          \
//           6
static void flatten(TreeNode *root) {
    function<TreeNode *(TreeNode *)> solve = [&](TreeNode *node) -> TreeNode * {
        if (node == nullptr)
            return nullptr;
        if (node->left == nullptr && node->right == nullptr) {
            return node;
        }
        TreeNode *leftTail = solve(node->left);
        TreeNode *rightTail = solve(node->right);
        if (leftTail != nullptr) {
            leftTail->right = node->right;
            node->right = node->left;
            node->left = nullptr;
        }
        return rightTail == nullptr ? leftTail : rightTail;
    };
    solve(root);
}

// 173. Binary Search Tree Iterator
// Implement an iterator over a binary search tree (BST). Your iterator will be
// initialized with the root node of a BST. Calling next() will return the next
// smallest number in the BST. Note: next() and hasNext() should run in average
// O(1) time and uses O(h) memory, where h is the height of the tree.
class BSTIterator {
  private:
    stack<TreeNode *> _stack;
    TreeNode *_node;

  public:
    BSTIterator(TreeNode *root) { _node = root; }

    /** @return whether we have a next smallest number */
    bool hasNext() { return !_stack.empty() || _node != nullptr; }

    /** @return the next smallest number */
    int next() {
        int val;
        while (hasNext()) {
            if (_node != nullptr) {
                _stack.push(_node);
                _node = _node->left;
            } else {
                _node = _stack.top();
                _stack.pop();
                val = _node->val;
                _node = _node->right;
                break;
            }
        }
        return val;
    }
};

struct TreeLinkNode {
    TreeLinkNode *left;
    TreeLinkNode *right;
    TreeLinkNode *next;
};

// 116. Populating Next Right Pointers in Each Node
// Given a binary tree Populate each next pointer to point to its next right
// node. If there is no next right node, the next pointer should be set to NULL.
// Initially, all next pointers are set to NULL. Note: You may only use constant
// extra space. You may assume that it is a perfect binary tree (ie, all leaves
// are at the same level, and every parent has two children). For example, Given
// the following perfect binary tree,
//      1
//    /   \
//   2     3
//  / \   / \
// 4   5 6   7
// After calling your function, the tree should look like :
//      1->NULL
//    /   \
//   2 ->  3->NULL
//  / \   / \
// 4-> 5->6->7->NULL
static void connect(TreeLinkNode *root) {
    TreeLinkNode *leftMost = root;
    while (leftMost != nullptr && leftMost->left != nullptr) {
        TreeLinkNode *node = leftMost;
        leftMost = leftMost->left;
        TreeLinkNode *left = nullptr;
        while (node != nullptr) {
            if (left != nullptr) {
                left->next = node->left;
            }
            node->left->next = node->right;
            left = node->right;
            node = node->next;
        }
    }
}

// 117. Populating Next Right Pointers in Each Node II
// Follow up for problem "Populating Next Right Pointers in Each Node". What if
// the given tree could be any binarytree ? Would your previous solution still
// work? Note: You may only use constant extra space. For example, Given the
// following binary tree,
//     1
//    / \
//   2    3
//  / \    \
// 4   5    7
// After calling your function, the tree should look like :
//     1->NULL
//    / \
//   2 -> 3->NULL
//  / \    \
// 4-> 5 -> 7->NULL
static void connect2(TreeLinkNode *root) {
    TreeLinkNode *leftMost = root;
    while (leftMost != nullptr) {
        TreeLinkNode *node = leftMost;
        leftMost = nullptr;
        TreeLinkNode *left = nullptr;
        while (node != nullptr) {
            if (node->left != nullptr) {
                if (leftMost == nullptr) {
                    leftMost = node->left;
                }
                if (left != nullptr) {
                    left->next = node->left;
                }
                left = node->left;
            }
            if (node->right != nullptr) {
                if (leftMost == nullptr) {
                    leftMost = node->right;
                }
                if (left != nullptr) {
                    left->next = node->right;
                }
                left = node->right;
            }
            node = node->next;
        }
    }
}

// 133. Clone Graph
// Clone an undirected graph. Each node in the graph contains a label and a list
// of its neighbors. OJ's undirected graph serialization: Nodes are labeled
// uniquely. We use # as a separator for each node, and , as a separator for
// node label and each neighbor of the node. As an example, consider the
// serialized graph { 0,1,2#1,2#2,2 }. The graph has a total of three nodes, and
// therefore contains three parts as separated by #. First node is labeled as 0.
// Connect node 0 to both nodes 1 and 2. Second node is labeled as 1. Connect
// node 1 to node 2. Third node is labeled as 2. Connect node 2 to node 2
// (itself), thus forming a self-cycle. Visually, the graph looks like the
// following :
//    1
//   /  \
//  /    \
// 0 -- - 2
//       / \
//       \_/
struct UndirectedGraphNode {
    int label;
    vector<UndirectedGraphNode *> neighbors;
    UndirectedGraphNode(int x) : label(x){};
};
static UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
    map<int, UndirectedGraphNode *> cloned;
    function<UndirectedGraphNode *(UndirectedGraphNode *)> clone =
        [&](UndirectedGraphNode *n) -> UndirectedGraphNode * {
        if (n == nullptr)
            return nullptr;
        if (cloned.find(n->label) != cloned.end())
            return cloned[n->label];
        UndirectedGraphNode *copy = new UndirectedGraphNode(n->label);
        cloned[n->label] = copy;
        for (size_t i = 0; i < n->neighbors.size(); i++) {
            int label = n->neighbors[i]->label;
            if (cloned.find(label) == cloned.end()) {
                cloned[label] = clone(n->neighbors[i]);
            }
            copy->neighbors.push_back(cloned[label]);
        }
        return copy;
    };
    return clone(node);
}

struct RandomListNode {
    int label;
    RandomListNode *next, *random;
    RandomListNode(int x) : label(x), next(nullptr), random(nullptr) {}
};
// 138. Copy List with Random Pointer
// A linked list is given such that each node contains an additional random
// pointer which could point to any node in the list or null. Return a deep copy
// of the list.
static RandomListNode *copyRandomList(RandomListNode *head) {
    map<RandomListNode *, RandomListNode *> copied;
    function<RandomListNode *(RandomListNode *)> copy =
        [&](RandomListNode *node) -> RandomListNode * {
        if (node == nullptr)
            return nullptr;
        RandomListNode *c = new RandomListNode(node->label);
        copied[node] = c;
        if (copied.find(node->next) == copied.end()) {
            copied[node->next] = copy(node->next);
        }
        c->next = copied[node->next];
        if (copied.find(node->random) == copied.end()) {
            copied[node->random] = copy(node->random);
        }
        c->random = copied[node->random];
        return c;
    };
    return copy(head);
}
} // namespace LeetCode
} // namespace Test

#endif
